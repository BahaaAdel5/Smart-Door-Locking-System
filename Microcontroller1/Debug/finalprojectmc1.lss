
finalprojectmc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  000031ec  00003280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080012a  0080012a  0000334a  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff5  00000000  00000000  00005fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 10 	call	0x203c	; 0x203c <main>
      8a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e1       	ldi	r26, 0x18	; 24
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer_fn>:

/*------------------------------------------------------------------------------
[Function Name]: timer_fn
[Description]: counts 15 or 3 seconds after callback from timer0 driver
------------------------------------------------------------------------------*/
void timer_fn(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++; /*increment ticks counter every timer overflow*/
     b4e:	80 91 2d 01 	lds	r24, 0x012D
     b52:	90 91 2e 01 	lds	r25, 0x012E
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 2e 01 	sts	0x012E, r25
     b5c:	80 93 2d 01 	sts	0x012D, r24

	if(fifteen == 1){ /*check if it is required to count 15 seconds*/
     b60:	80 91 31 01 	lds	r24, 0x0131
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	81 f4       	brne	.+32     	; 0xb88 <timer_fn+0x42>
		if(g_tick > 31*15){ /*15 seconds = 465 ticks*/
     b68:	80 91 2d 01 	lds	r24, 0x012D
     b6c:	90 91 2e 01 	lds	r25, 0x012E
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	82 3d       	cpi	r24, 0xD2	; 210
     b74:	92 07       	cpc	r25, r18
     b76:	d0 f0       	brcs	.+52     	; 0xbac <timer_fn+0x66>
			fifteenSecondsFlag = 1; /*run motor for 15 seconds*/
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 2f 01 	sts	0x012F, r24
			g_tick = 0; /*clear the tick counter again to count a new 15 seconds when needed*/
     b7e:	10 92 2e 01 	sts	0x012E, r1
     b82:	10 92 2d 01 	sts	0x012D, r1
     b86:	12 c0       	rjmp	.+36     	; 0xbac <timer_fn+0x66>
		}
	}else if(three ==1){ /*check if it is required to count 3 seconds*/
     b88:	80 91 32 01 	lds	r24, 0x0132
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	71 f4       	brne	.+28     	; 0xbac <timer_fn+0x66>
		if(g_tick > 31*3){ /*3 seconds = 93 ticks*/
     b90:	80 91 2d 01 	lds	r24, 0x012D
     b94:	90 91 2e 01 	lds	r25, 0x012E
     b98:	8e 35       	cpi	r24, 0x5E	; 94
     b9a:	91 05       	cpc	r25, r1
     b9c:	38 f0       	brcs	.+14     	; 0xbac <timer_fn+0x66>
			threeSecondsFlag = 1; /*stop motor for 3 seconds*/
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 30 01 	sts	0x0130, r24
			g_tick = 0; /*clear the tick counter again to count a new 3 seconds when needed*/
     ba4:	10 92 2e 01 	sts	0x012E, r1
     ba8:	10 92 2d 01 	sts	0x012D, r1
		}
	}
}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <enterPassFirst>:

/*------------------------------------------------------------------------------
[Function Name]: enterPassFirst
[Description]: Get entered password from user and send it to MC2 to be stored in EEPROM
------------------------------------------------------------------------------*/
void enterPassFirst(){
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	c4 55       	subi	r28, 0x54	; 84
     bc0:	d0 40       	sbci	r29, 0x00	; 0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
	if(passCount == 0){ /*check if it is the 1st time to enter password*/
     bcc:	80 91 2a 01 	lds	r24, 0x012A
     bd0:	88 23       	and	r24, r24
     bd2:	81 f4       	brne	.+32     	; 0xbf4 <enterPassFirst+0x42>
		LCD_clearScreen(); /*clear LCD screen*/
     bd4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0,"Please enter new"); /*display string @row 0 col 0*/
     bd8:	20 e6       	ldi	r18, 0x60	; 96
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0,"pass:");  /*display string @row 1 col 0*/
     be6:	21 e7       	ldi	r18, 0x71	; 113
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	a9 01       	movw	r20, r18
     bf0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	}

	key1 = KeyPad_getPressedKey(); /*get the 1st pressed key from keypad*/
     bf4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
     bf8:	80 93 38 01 	sts	0x0138, r24
	//LCD_intgerToString(key1);
	LCD_displayCharacter('*'); /*display '*'*/
     bfc:	8a e2       	ldi	r24, 0x2A	; 42
     bfe:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key1); /*send entered key from keypad to MC2*/
     c02:	80 91 38 01 	lds	r24, 0x0138
     c06:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
     c0a:	fe 01       	movw	r30, r28
     c0c:	ef 5a       	subi	r30, 0xAF	; 175
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	aa ef       	ldi	r26, 0xFA	; 250
     c16:	b4 e4       	ldi	r27, 0x44	; 68
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	a2 83       	std	Z+2, r26	; 0x02
     c1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c20:	8e 01       	movw	r16, r28
     c22:	03 5b       	subi	r16, 0xB3	; 179
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	fe 01       	movw	r30, r28
     c28:	ef 5a       	subi	r30, 0xAF	; 175
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	93 81       	ldd	r25, Z+3	; 0x03
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	4a e7       	ldi	r20, 0x7A	; 122
     c3a:	53 e4       	ldi	r21, 0x43	; 67
     c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	f8 01       	movw	r30, r16
     c46:	80 83       	st	Z, r24
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	a2 83       	std	Z+2, r26	; 0x02
     c4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c4e:	fe 01       	movw	r30, r28
     c50:	e3 5b       	subi	r30, 0xB3	; 179
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c68:	88 23       	and	r24, r24
     c6a:	44 f4       	brge	.+16     	; 0xc7c <enterPassFirst+0xca>
		__ticks = 1;
     c6c:	fe 01       	movw	r30, r28
     c6e:	e5 5b       	subi	r30, 0xB5	; 181
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
     c7a:	64 c0       	rjmp	.+200    	; 0xd44 <enterPassFirst+0x192>
	else if (__tmp > 65535)
     c7c:	fe 01       	movw	r30, r28
     c7e:	e3 5b       	subi	r30, 0xB3	; 179
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c96:	18 16       	cp	r1, r24
     c98:	0c f0       	brlt	.+2      	; 0xc9c <enterPassFirst+0xea>
     c9a:	43 c0       	rjmp	.+134    	; 0xd22 <enterPassFirst+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9c:	fe 01       	movw	r30, r28
     c9e:	ef 5a       	subi	r30, 0xAF	; 175
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e2       	ldi	r20, 0x20	; 32
     cb0:	51 e4       	ldi	r21, 0x41	; 65
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8e 01       	movw	r16, r28
     cbc:	05 5b       	subi	r16, 0xB5	; 181
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	f8 01       	movw	r30, r16
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	80 83       	st	Z, r24
     cd2:	1f c0       	rjmp	.+62     	; 0xd12 <enterPassFirst+0x160>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e7 5b       	subi	r30, 0xB7	; 183
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	89 e1       	ldi	r24, 0x19	; 25
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce2:	fe 01       	movw	r30, r28
     ce4:	e7 5b       	subi	r30, 0xB7	; 183
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <enterPassFirst+0x13a>
     cf0:	fe 01       	movw	r30, r28
     cf2:	e7 5b       	subi	r30, 0xB7	; 183
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	de 01       	movw	r26, r28
     cfc:	a5 5b       	subi	r26, 0xB5	; 181
     cfe:	bf 4f       	sbci	r27, 0xFF	; 255
     d00:	fe 01       	movw	r30, r28
     d02:	e5 5b       	subi	r30, 0xB5	; 181
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	fe 01       	movw	r30, r28
     d14:	e5 5b       	subi	r30, 0xB5	; 181
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	d1 f6       	brne	.-76     	; 0xcd4 <enterPassFirst+0x122>
     d20:	27 c0       	rjmp	.+78     	; 0xd70 <enterPassFirst+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d22:	8e 01       	movw	r16, r28
     d24:	05 5b       	subi	r16, 0xB5	; 181
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	fe 01       	movw	r30, r28
     d2a:	e3 5b       	subi	r30, 0xB3	; 179
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	f8 01       	movw	r30, r16
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	de 01       	movw	r26, r28
     d46:	a9 5b       	subi	r26, 0xB9	; 185
     d48:	bf 4f       	sbci	r27, 0xFF	; 255
     d4a:	fe 01       	movw	r30, r28
     d4c:	e5 5b       	subi	r30, 0xB5	; 181
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	8d 93       	st	X+, r24
     d56:	9c 93       	st	X, r25
     d58:	fe 01       	movw	r30, r28
     d5a:	e9 5b       	subi	r30, 0xB9	; 185
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <enterPassFirst+0x1b0>
     d66:	fe 01       	movw	r30, r28
     d68:	e9 5b       	subi	r30, 0xB9	; 185
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
	_delay_ms(2000); /*delay 2 seconds to get only one number from one press from user*/

	key2 = KeyPad_getPressedKey(); /*get the 2nd pressed key from keypad*/
     d70:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
     d74:	80 93 3a 01 	sts	0x013A, r24
	//LCD_intgerToString(key2);
	LCD_displayCharacter('*');
     d78:	8a e2       	ldi	r24, 0x2A	; 42
     d7a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key2);
     d7e:	80 91 3a 01 	lds	r24, 0x013A
     d82:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
     d86:	fe 01       	movw	r30, r28
     d88:	ed 5b       	subi	r30, 0xBD	; 189
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	aa ef       	ldi	r26, 0xFA	; 250
     d92:	b4 e4       	ldi	r27, 0x44	; 68
     d94:	80 83       	st	Z, r24
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	a2 83       	std	Z+2, r26	; 0x02
     d9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	8e 01       	movw	r16, r28
     d9e:	01 5c       	subi	r16, 0xC1	; 193
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	fe 01       	movw	r30, r28
     da4:	ed 5b       	subi	r30, 0xBD	; 189
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	60 81       	ld	r22, Z
     daa:	71 81       	ldd	r23, Z+1	; 0x01
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4a e7       	ldi	r20, 0x7A	; 122
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	f8 01       	movw	r30, r16
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dca:	fe 01       	movw	r30, r28
     dcc:	ff 96       	adiw	r30, 0x3f	; 63
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <enterPassFirst+0x23e>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e af       	std	Y+62, r25	; 0x3e
     dec:	8d af       	std	Y+61, r24	; 0x3d
     dee:	46 c0       	rjmp	.+140    	; 0xe7c <enterPassFirst+0x2ca>
	else if (__tmp > 65535)
     df0:	fe 01       	movw	r30, r28
     df2:	ff 96       	adiw	r30, 0x3f	; 63
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e08:	18 16       	cp	r1, r24
     e0a:	64 f5       	brge	.+88     	; 0xe64 <enterPassFirst+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0c:	fe 01       	movw	r30, r28
     e0e:	ed 5b       	subi	r30, 0xBD	; 189
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9e af       	std	Y+62, r25	; 0x3e
     e38:	8d af       	std	Y+61, r24	; 0x3d
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <enterPassFirst+0x2a8>
     e3c:	89 e1       	ldi	r24, 0x19	; 25
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9c af       	std	Y+60, r25	; 0x3c
     e42:	8b af       	std	Y+59, r24	; 0x3b
     e44:	8b ad       	ldd	r24, Y+59	; 0x3b
     e46:	9c ad       	ldd	r25, Y+60	; 0x3c
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <enterPassFirst+0x296>
     e4c:	9c af       	std	Y+60, r25	; 0x3c
     e4e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e50:	8d ad       	ldd	r24, Y+61	; 0x3d
     e52:	9e ad       	ldd	r25, Y+62	; 0x3e
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	9e af       	std	Y+62, r25	; 0x3e
     e58:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e5c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	69 f7       	brne	.-38     	; 0xe3c <enterPassFirst+0x28a>
     e62:	16 c0       	rjmp	.+44     	; 0xe90 <enterPassFirst+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e64:	fe 01       	movw	r30, r28
     e66:	ff 96       	adiw	r30, 0x3f	; 63
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e af       	std	Y+62, r25	; 0x3e
     e7a:	8d af       	std	Y+61, r24	; 0x3d
     e7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e80:	9a af       	std	Y+58, r25	; 0x3a
     e82:	89 af       	std	Y+57, r24	; 0x39
     e84:	89 ad       	ldd	r24, Y+57	; 0x39
     e86:	9a ad       	ldd	r25, Y+58	; 0x3a
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <enterPassFirst+0x2d6>
     e8c:	9a af       	std	Y+58, r25	; 0x3a
     e8e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);

	key3 = KeyPad_getPressedKey(); /*get the 3rd pressed key from keypad*/
     e90:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
     e94:	80 93 39 01 	sts	0x0139, r24
	//LCD_intgerToString(key3);
	LCD_displayCharacter('*');
     e98:	8a e2       	ldi	r24, 0x2A	; 42
     e9a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key3);
     e9e:	80 91 39 01 	lds	r24, 0x0139
     ea2:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	aa ef       	ldi	r26, 0xFA	; 250
     eac:	b4 e4       	ldi	r27, 0x44	; 68
     eae:	8d ab       	std	Y+53, r24	; 0x35
     eb0:	9e ab       	std	Y+54, r25	; 0x36
     eb2:	af ab       	std	Y+55, r26	; 0x37
     eb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb6:	6d a9       	ldd	r22, Y+53	; 0x35
     eb8:	7e a9       	ldd	r23, Y+54	; 0x36
     eba:	8f a9       	ldd	r24, Y+55	; 0x37
     ebc:	98 ad       	ldd	r25, Y+56	; 0x38
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	4a e7       	ldi	r20, 0x7A	; 122
     ec4:	53 e4       	ldi	r21, 0x43	; 67
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	89 ab       	std	Y+49, r24	; 0x31
     ed0:	9a ab       	std	Y+50, r25	; 0x32
     ed2:	ab ab       	std	Y+51, r26	; 0x33
     ed4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ed6:	69 a9       	ldd	r22, Y+49	; 0x31
     ed8:	7a a9       	ldd	r23, Y+50	; 0x32
     eda:	8b a9       	ldd	r24, Y+51	; 0x33
     edc:	9c a9       	ldd	r25, Y+52	; 0x34
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eea:	88 23       	and	r24, r24
     eec:	2c f4       	brge	.+10     	; 0xef8 <enterPassFirst+0x346>
		__ticks = 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	98 ab       	std	Y+48, r25	; 0x30
     ef4:	8f a7       	std	Y+47, r24	; 0x2f
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <enterPassFirst+0x3c4>
	else if (__tmp > 65535)
     ef8:	69 a9       	ldd	r22, Y+49	; 0x31
     efa:	7a a9       	ldd	r23, Y+50	; 0x32
     efc:	8b a9       	ldd	r24, Y+51	; 0x33
     efe:	9c a9       	ldd	r25, Y+52	; 0x34
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	4f e7       	ldi	r20, 0x7F	; 127
     f06:	57 e4       	ldi	r21, 0x47	; 71
     f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	4c f5       	brge	.+82     	; 0xf62 <enterPassFirst+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	6d a9       	ldd	r22, Y+53	; 0x35
     f12:	7e a9       	ldd	r23, Y+54	; 0x36
     f14:	8f a9       	ldd	r24, Y+55	; 0x37
     f16:	98 ad       	ldd	r25, Y+56	; 0x38
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e2       	ldi	r20, 0x20	; 32
     f1e:	51 e4       	ldi	r21, 0x41	; 65
     f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	98 ab       	std	Y+48, r25	; 0x30
     f36:	8f a7       	std	Y+47, r24	; 0x2f
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <enterPassFirst+0x3a6>
     f3a:	89 e1       	ldi	r24, 0x19	; 25
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9e a7       	std	Y+46, r25	; 0x2e
     f40:	8d a7       	std	Y+45, r24	; 0x2d
     f42:	8d a5       	ldd	r24, Y+45	; 0x2d
     f44:	9e a5       	ldd	r25, Y+46	; 0x2e
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <enterPassFirst+0x394>
     f4a:	9e a7       	std	Y+46, r25	; 0x2e
     f4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f50:	98 a9       	ldd	r25, Y+48	; 0x30
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	98 ab       	std	Y+48, r25	; 0x30
     f56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f58:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5a:	98 a9       	ldd	r25, Y+48	; 0x30
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	69 f7       	brne	.-38     	; 0xf3a <enterPassFirst+0x388>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <enterPassFirst+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f62:	69 a9       	ldd	r22, Y+49	; 0x31
     f64:	7a a9       	ldd	r23, Y+50	; 0x32
     f66:	8b a9       	ldd	r24, Y+51	; 0x33
     f68:	9c a9       	ldd	r25, Y+52	; 0x34
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	98 ab       	std	Y+48, r25	; 0x30
     f74:	8f a7       	std	Y+47, r24	; 0x2f
     f76:	8f a5       	ldd	r24, Y+47	; 0x2f
     f78:	98 a9       	ldd	r25, Y+48	; 0x30
     f7a:	9c a7       	std	Y+44, r25	; 0x2c
     f7c:	8b a7       	std	Y+43, r24	; 0x2b
     f7e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f80:	9c a5       	ldd	r25, Y+44	; 0x2c
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <enterPassFirst+0x3d0>
     f86:	9c a7       	std	Y+44, r25	; 0x2c
     f88:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);

	key4 = KeyPad_getPressedKey(); /*get the 4th pressed key from keypad*/
     f8a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
     f8e:	80 93 35 01 	sts	0x0135, r24
	//LCD_intgerToString(key4);
	LCD_displayCharacter('*');
     f92:	8a e2       	ldi	r24, 0x2A	; 42
     f94:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key4);
     f98:	80 91 35 01 	lds	r24, 0x0135
     f9c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	aa ef       	ldi	r26, 0xFA	; 250
     fa6:	b4 e4       	ldi	r27, 0x44	; 68
     fa8:	8f a3       	std	Y+39, r24	; 0x27
     faa:	98 a7       	std	Y+40, r25	; 0x28
     fac:	a9 a7       	std	Y+41, r26	; 0x29
     fae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb0:	6f a1       	ldd	r22, Y+39	; 0x27
     fb2:	78 a5       	ldd	r23, Y+40	; 0x28
     fb4:	89 a5       	ldd	r24, Y+41	; 0x29
     fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	4a e7       	ldi	r20, 0x7A	; 122
     fbe:	53 e4       	ldi	r21, 0x43	; 67
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	8b a3       	std	Y+35, r24	; 0x23
     fca:	9c a3       	std	Y+36, r25	; 0x24
     fcc:	ad a3       	std	Y+37, r26	; 0x25
     fce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fd0:	6b a1       	ldd	r22, Y+35	; 0x23
     fd2:	7c a1       	ldd	r23, Y+36	; 0x24
     fd4:	8d a1       	ldd	r24, Y+37	; 0x25
     fd6:	9e a1       	ldd	r25, Y+38	; 0x26
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	5f e3       	ldi	r21, 0x3F	; 63
     fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe4:	88 23       	and	r24, r24
     fe6:	2c f4       	brge	.+10     	; 0xff2 <enterPassFirst+0x440>
		__ticks = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9a a3       	std	Y+34, r25	; 0x22
     fee:	89 a3       	std	Y+33, r24	; 0x21
     ff0:	3f c0       	rjmp	.+126    	; 0x1070 <enterPassFirst+0x4be>
	else if (__tmp > 65535)
     ff2:	6b a1       	ldd	r22, Y+35	; 0x23
     ff4:	7c a1       	ldd	r23, Y+36	; 0x24
     ff6:	8d a1       	ldd	r24, Y+37	; 0x25
     ff8:	9e a1       	ldd	r25, Y+38	; 0x26
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	3f ef       	ldi	r19, 0xFF	; 255
     ffe:	4f e7       	ldi	r20, 0x7F	; 127
    1000:	57 e4       	ldi	r21, 0x47	; 71
    1002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1006:	18 16       	cp	r1, r24
    1008:	4c f5       	brge	.+82     	; 0x105c <enterPassFirst+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100a:	6f a1       	ldd	r22, Y+39	; 0x27
    100c:	78 a5       	ldd	r23, Y+40	; 0x28
    100e:	89 a5       	ldd	r24, Y+41	; 0x29
    1010:	9a a5       	ldd	r25, Y+42	; 0x2a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e2       	ldi	r20, 0x20	; 32
    1018:	51 e4       	ldi	r21, 0x41	; 65
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9a a3       	std	Y+34, r25	; 0x22
    1030:	89 a3       	std	Y+33, r24	; 0x21
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <enterPassFirst+0x4a0>
    1034:	89 e1       	ldi	r24, 0x19	; 25
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	98 a3       	std	Y+32, r25	; 0x20
    103a:	8f 8f       	std	Y+31, r24	; 0x1f
    103c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    103e:	98 a1       	ldd	r25, Y+32	; 0x20
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <enterPassFirst+0x48e>
    1044:	98 a3       	std	Y+32, r25	; 0x20
    1046:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1048:	89 a1       	ldd	r24, Y+33	; 0x21
    104a:	9a a1       	ldd	r25, Y+34	; 0x22
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	9a a3       	std	Y+34, r25	; 0x22
    1050:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1052:	89 a1       	ldd	r24, Y+33	; 0x21
    1054:	9a a1       	ldd	r25, Y+34	; 0x22
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	69 f7       	brne	.-38     	; 0x1034 <enterPassFirst+0x482>
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <enterPassFirst+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105c:	6b a1       	ldd	r22, Y+35	; 0x23
    105e:	7c a1       	ldd	r23, Y+36	; 0x24
    1060:	8d a1       	ldd	r24, Y+37	; 0x25
    1062:	9e a1       	ldd	r25, Y+38	; 0x26
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9a a3       	std	Y+34, r25	; 0x22
    106e:	89 a3       	std	Y+33, r24	; 0x21
    1070:	89 a1       	ldd	r24, Y+33	; 0x21
    1072:	9a a1       	ldd	r25, Y+34	; 0x22
    1074:	9e 8f       	std	Y+30, r25	; 0x1e
    1076:	8d 8f       	std	Y+29, r24	; 0x1d
    1078:	8d 8d       	ldd	r24, Y+29	; 0x1d
    107a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <enterPassFirst+0x4ca>
    1080:	9e 8f       	std	Y+30, r25	; 0x1e
    1082:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);

	key5 = KeyPad_getPressedKey(); /*get the 5th pressed key from keypad*/
    1084:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    1088:	80 93 36 01 	sts	0x0136, r24
	//LCD_intgerToString(key5);
	LCD_displayCharacter('*');
    108c:	8a e2       	ldi	r24, 0x2A	; 42
    108e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key5);
    1092:	80 91 36 01 	lds	r24, 0x0136
    1096:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	aa ef       	ldi	r26, 0xFA	; 250
    10a0:	b4 e4       	ldi	r27, 0x44	; 68
    10a2:	89 8f       	std	Y+25, r24	; 0x19
    10a4:	9a 8f       	std	Y+26, r25	; 0x1a
    10a6:	ab 8f       	std	Y+27, r26	; 0x1b
    10a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10aa:	69 8d       	ldd	r22, Y+25	; 0x19
    10ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4a e7       	ldi	r20, 0x7A	; 122
    10b8:	53 e4       	ldi	r21, 0x43	; 67
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	8d 8b       	std	Y+21, r24	; 0x15
    10c4:	9e 8b       	std	Y+22, r25	; 0x16
    10c6:	af 8b       	std	Y+23, r26	; 0x17
    10c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ca:	6d 89       	ldd	r22, Y+21	; 0x15
    10cc:	7e 89       	ldd	r23, Y+22	; 0x16
    10ce:	8f 89       	ldd	r24, Y+23	; 0x17
    10d0:	98 8d       	ldd	r25, Y+24	; 0x18
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e8       	ldi	r20, 0x80	; 128
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10de:	88 23       	and	r24, r24
    10e0:	2c f4       	brge	.+10     	; 0x10ec <enterPassFirst+0x53a>
		__ticks = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	8b 8b       	std	Y+19, r24	; 0x13
    10ea:	3f c0       	rjmp	.+126    	; 0x116a <enterPassFirst+0x5b8>
	else if (__tmp > 65535)
    10ec:	6d 89       	ldd	r22, Y+21	; 0x15
    10ee:	7e 89       	ldd	r23, Y+22	; 0x16
    10f0:	8f 89       	ldd	r24, Y+23	; 0x17
    10f2:	98 8d       	ldd	r25, Y+24	; 0x18
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	3f ef       	ldi	r19, 0xFF	; 255
    10f8:	4f e7       	ldi	r20, 0x7F	; 127
    10fa:	57 e4       	ldi	r21, 0x47	; 71
    10fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1100:	18 16       	cp	r1, r24
    1102:	4c f5       	brge	.+82     	; 0x1156 <enterPassFirst+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1104:	69 8d       	ldd	r22, Y+25	; 0x19
    1106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9c 8b       	std	Y+20, r25	; 0x14
    112a:	8b 8b       	std	Y+19, r24	; 0x13
    112c:	0f c0       	rjmp	.+30     	; 0x114c <enterPassFirst+0x59a>
    112e:	89 e1       	ldi	r24, 0x19	; 25
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9a 8b       	std	Y+18, r25	; 0x12
    1134:	89 8b       	std	Y+17, r24	; 0x11
    1136:	89 89       	ldd	r24, Y+17	; 0x11
    1138:	9a 89       	ldd	r25, Y+18	; 0x12
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <enterPassFirst+0x588>
    113e:	9a 8b       	std	Y+18, r25	; 0x12
    1140:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1142:	8b 89       	ldd	r24, Y+19	; 0x13
    1144:	9c 89       	ldd	r25, Y+20	; 0x14
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	8b 89       	ldd	r24, Y+19	; 0x13
    114e:	9c 89       	ldd	r25, Y+20	; 0x14
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	69 f7       	brne	.-38     	; 0x112e <enterPassFirst+0x57c>
    1154:	14 c0       	rjmp	.+40     	; 0x117e <enterPassFirst+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1156:	6d 89       	ldd	r22, Y+21	; 0x15
    1158:	7e 89       	ldd	r23, Y+22	; 0x16
    115a:	8f 89       	ldd	r24, Y+23	; 0x17
    115c:	98 8d       	ldd	r25, Y+24	; 0x18
    115e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	8b 8b       	std	Y+19, r24	; 0x13
    116a:	8b 89       	ldd	r24, Y+19	; 0x13
    116c:	9c 89       	ldd	r25, Y+20	; 0x14
    116e:	98 8b       	std	Y+16, r25	; 0x10
    1170:	8f 87       	std	Y+15, r24	; 0x0f
    1172:	8f 85       	ldd	r24, Y+15	; 0x0f
    1174:	98 89       	ldd	r25, Y+16	; 0x10
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <enterPassFirst+0x5c4>
    117a:	98 8b       	std	Y+16, r25	; 0x10
    117c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);

	key6 = KeyPad_getPressedKey(); /*get the 6th pressed key from keypad*/
    117e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    1182:	80 93 3b 01 	sts	0x013B, r24
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	aa ef       	ldi	r26, 0xFA	; 250
    118c:	b4 e4       	ldi	r27, 0x44	; 68
    118e:	8b 87       	std	Y+11, r24	; 0x0b
    1190:	9c 87       	std	Y+12, r25	; 0x0c
    1192:	ad 87       	std	Y+13, r26	; 0x0d
    1194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a e7       	ldi	r20, 0x7A	; 122
    11a4:	53 e4       	ldi	r21, 0x43	; 67
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8f 83       	std	Y+7, r24	; 0x07
    11b0:	98 87       	std	Y+8, r25	; 0x08
    11b2:	a9 87       	std	Y+9, r26	; 0x09
    11b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <enterPassFirst+0x626>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <enterPassFirst+0x6a4>
	else if (__tmp > 65535)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <enterPassFirst+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <enterPassFirst+0x686>
    121a:	89 e1       	ldi	r24, 0x19	; 25
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <enterPassFirst+0x674>
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <enterPassFirst+0x668>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <enterPassFirst+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <enterPassFirst+0x6b0>
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	if(key6 == 13 && passCount == 0){ /*check if enter is pressed and it is the 1st time to enter new password*/
    126a:	80 91 3b 01 	lds	r24, 0x013B
    126e:	8d 30       	cpi	r24, 0x0D	; 13
    1270:	01 f5       	brne	.+64     	; 0x12b2 <enterPassFirst+0x700>
    1272:	80 91 2a 01 	lds	r24, 0x012A
    1276:	88 23       	and	r24, r24
    1278:	e1 f4       	brne	.+56     	; 0x12b2 <enterPassFirst+0x700>
		passCount++; /*increment counter by 1*/
    127a:	80 91 2a 01 	lds	r24, 0x012A
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 93 2a 01 	sts	0x012A, r24
		LCD_clearScreen(); /*clear LCD screen*/
    1284:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0,"Please re-enter"); /*display string @row 0 col 0*/
    1288:	27 e7       	ldi	r18, 0x77	; 119
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0,"new pass:"); /*display string @row 1 col 0*/
    1296:	27 e8       	ldi	r18, 0x87	; 135
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	a9 01       	movw	r20, r18
    12a0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
		UART_sendByte(key6); /*send enter key to MC2*/
    12a4:	80 91 3b 01 	lds	r24, 0x013B
    12a8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		enterPassFirst(); /*enter function again to re-enter password*/
    12ac:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <enterPassFirst>
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <enterPassFirst+0x718>
	}else if(key6 == 13 && passCount == 1){ /*check if enter is pressed and it is the 2nd time to enter new password*/
    12b2:	80 91 3b 01 	lds	r24, 0x013B
    12b6:	8d 30       	cpi	r24, 0x0D	; 13
    12b8:	41 f4       	brne	.+16     	; 0x12ca <enterPassFirst+0x718>
    12ba:	80 91 2a 01 	lds	r24, 0x012A
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	21 f4       	brne	.+8      	; 0x12ca <enterPassFirst+0x718>
		UART_sendByte(key6); /*send enter key to MC2*/
    12c2:	80 91 3b 01 	lds	r24, 0x013B
    12c6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
	}
}
    12ca:	cc 5a       	subi	r28, 0xAC	; 172
    12cc:	df 4f       	sbci	r29, 0xFF	; 255
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <enterPass>:

/*------------------------------------------------------------------------------
[Function Name]: enterPass
[Description]: Get entered password from user and send it to MC2 to be checked with the stored one in EEPROM
------------------------------------------------------------------------------*/
void enterPass(){
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	c4 55       	subi	r28, 0x54	; 84
    12f0:	d0 40       	sbci	r29, 0x00	; 0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    12fc:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"Please enter"); /*display string @row 0 col 0*/
    1300:	21 e9       	ldi	r18, 0x91	; 145
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0,"pass:"); /*display string @row 1 col 0*/
    130e:	21 e7       	ldi	r18, 0x71	; 113
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>

	key1 = KeyPad_getPressedKey(); /*get the 1st pressed key from keypad*/
    131c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    1320:	80 93 38 01 	sts	0x0138, r24
	//LCD_intgerToString(key1);
	LCD_displayCharacter('*'); /*display '*'*/
    1324:	8a e2       	ldi	r24, 0x2A	; 42
    1326:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key1); /*send entered key from keypad to MC2*/
    132a:	80 91 38 01 	lds	r24, 0x0138
    132e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    1332:	fe 01       	movw	r30, r28
    1334:	ef 5a       	subi	r30, 0xAF	; 175
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	aa ef       	ldi	r26, 0xFA	; 250
    133e:	b4 e4       	ldi	r27, 0x44	; 68
    1340:	80 83       	st	Z, r24
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	a2 83       	std	Z+2, r26	; 0x02
    1346:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1348:	8e 01       	movw	r16, r28
    134a:	03 5b       	subi	r16, 0xB3	; 179
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	ef 5a       	subi	r30, 0xAF	; 175
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a e7       	ldi	r20, 0x7A	; 122
    1362:	53 e4       	ldi	r21, 0x43	; 67
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	f8 01       	movw	r30, r16
    136e:	80 83       	st	Z, r24
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	a2 83       	std	Z+2, r26	; 0x02
    1374:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1376:	fe 01       	movw	r30, r28
    1378:	e3 5b       	subi	r30, 0xB3	; 179
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	44 f4       	brge	.+16     	; 0x13a4 <enterPass+0xc2>
		__ticks = 1;
    1394:	fe 01       	movw	r30, r28
    1396:	e5 5b       	subi	r30, 0xB5	; 181
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	64 c0       	rjmp	.+200    	; 0x146c <enterPass+0x18a>
	else if (__tmp > 65535)
    13a4:	fe 01       	movw	r30, r28
    13a6:	e3 5b       	subi	r30, 0xB3	; 179
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	0c f0       	brlt	.+2      	; 0x13c4 <enterPass+0xe2>
    13c2:	43 c0       	rjmp	.+134    	; 0x144a <enterPass+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 5a       	subi	r30, 0xAF	; 175
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	60 81       	ld	r22, Z
    13cc:	71 81       	ldd	r23, Z+1	; 0x01
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8e 01       	movw	r16, r28
    13e4:	05 5b       	subi	r16, 0xB5	; 181
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	f8 01       	movw	r30, r16
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	80 83       	st	Z, r24
    13fa:	1f c0       	rjmp	.+62     	; 0x143a <enterPass+0x158>
    13fc:	fe 01       	movw	r30, r28
    13fe:	e7 5b       	subi	r30, 0xB7	; 183
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5b       	subi	r30, 0xB7	; 183
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <enterPass+0x132>
    1418:	fe 01       	movw	r30, r28
    141a:	e7 5b       	subi	r30, 0xB7	; 183
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	de 01       	movw	r26, r28
    1424:	a5 5b       	subi	r26, 0xB5	; 181
    1426:	bf 4f       	sbci	r27, 0xFF	; 255
    1428:	fe 01       	movw	r30, r28
    142a:	e5 5b       	subi	r30, 0xB5	; 181
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143a:	fe 01       	movw	r30, r28
    143c:	e5 5b       	subi	r30, 0xB5	; 181
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	d1 f6       	brne	.-76     	; 0x13fc <enterPass+0x11a>
    1448:	27 c0       	rjmp	.+78     	; 0x1498 <enterPass+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	8e 01       	movw	r16, r28
    144c:	05 5b       	subi	r16, 0xB5	; 181
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	e3 5b       	subi	r30, 0xB3	; 179
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	f8 01       	movw	r30, r16
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
    146c:	de 01       	movw	r26, r28
    146e:	a9 5b       	subi	r26, 0xB9	; 185
    1470:	bf 4f       	sbci	r27, 0xFF	; 255
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5b       	subi	r30, 0xB5	; 181
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	8d 93       	st	X+, r24
    147e:	9c 93       	st	X, r25
    1480:	fe 01       	movw	r30, r28
    1482:	e9 5b       	subi	r30, 0xB9	; 185
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <enterPass+0x1a8>
    148e:	fe 01       	movw	r30, r28
    1490:	e9 5b       	subi	r30, 0xB9	; 185
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
	_delay_ms(2000); /*delay 2 seconds to get only one number from one press from user*/

	key2 = KeyPad_getPressedKey();
    1498:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    149c:	80 93 3a 01 	sts	0x013A, r24
	//LCD_intgerToString(key2);
	LCD_displayCharacter('*');
    14a0:	8a e2       	ldi	r24, 0x2A	; 42
    14a2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key2);
    14a6:	80 91 3a 01 	lds	r24, 0x013A
    14aa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    14ae:	fe 01       	movw	r30, r28
    14b0:	ed 5b       	subi	r30, 0xBD	; 189
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	aa ef       	ldi	r26, 0xFA	; 250
    14ba:	b4 e4       	ldi	r27, 0x44	; 68
    14bc:	80 83       	st	Z, r24
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	a2 83       	std	Z+2, r26	; 0x02
    14c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c4:	8e 01       	movw	r16, r28
    14c6:	01 5c       	subi	r16, 0xC1	; 193
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	fe 01       	movw	r30, r28
    14cc:	ed 5b       	subi	r30, 0xBD	; 189
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	60 81       	ld	r22, Z
    14d2:	71 81       	ldd	r23, Z+1	; 0x01
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a e7       	ldi	r20, 0x7A	; 122
    14de:	53 e4       	ldi	r21, 0x43	; 67
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	f8 01       	movw	r30, r16
    14ea:	80 83       	st	Z, r24
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	a2 83       	std	Z+2, r26	; 0x02
    14f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f2:	fe 01       	movw	r30, r28
    14f4:	ff 96       	adiw	r30, 0x3f	; 63
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150a:	88 23       	and	r24, r24
    150c:	2c f4       	brge	.+10     	; 0x1518 <enterPass+0x236>
		__ticks = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9e af       	std	Y+62, r25	; 0x3e
    1514:	8d af       	std	Y+61, r24	; 0x3d
    1516:	46 c0       	rjmp	.+140    	; 0x15a4 <enterPass+0x2c2>
	else if (__tmp > 65535)
    1518:	fe 01       	movw	r30, r28
    151a:	ff 96       	adiw	r30, 0x3f	; 63
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	64 f5       	brge	.+88     	; 0x158c <enterPass+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	fe 01       	movw	r30, r28
    1536:	ed 5b       	subi	r30, 0xBD	; 189
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e af       	std	Y+62, r25	; 0x3e
    1560:	8d af       	std	Y+61, r24	; 0x3d
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <enterPass+0x2a0>
    1564:	89 e1       	ldi	r24, 0x19	; 25
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9c af       	std	Y+60, r25	; 0x3c
    156a:	8b af       	std	Y+59, r24	; 0x3b
    156c:	8b ad       	ldd	r24, Y+59	; 0x3b
    156e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <enterPass+0x28e>
    1574:	9c af       	std	Y+60, r25	; 0x3c
    1576:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8d ad       	ldd	r24, Y+61	; 0x3d
    157a:	9e ad       	ldd	r25, Y+62	; 0x3e
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9e af       	std	Y+62, r25	; 0x3e
    1580:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8d ad       	ldd	r24, Y+61	; 0x3d
    1584:	9e ad       	ldd	r25, Y+62	; 0x3e
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <enterPass+0x282>
    158a:	16 c0       	rjmp	.+44     	; 0x15b8 <enterPass+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	fe 01       	movw	r30, r28
    158e:	ff 96       	adiw	r30, 0x3f	; 63
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e af       	std	Y+62, r25	; 0x3e
    15a2:	8d af       	std	Y+61, r24	; 0x3d
    15a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    15a8:	9a af       	std	Y+58, r25	; 0x3a
    15aa:	89 af       	std	Y+57, r24	; 0x39
    15ac:	89 ad       	ldd	r24, Y+57	; 0x39
    15ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <enterPass+0x2ce>
    15b4:	9a af       	std	Y+58, r25	; 0x3a
    15b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);

	key3 = KeyPad_getPressedKey();
    15b8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    15bc:	80 93 39 01 	sts	0x0139, r24
	//LCD_intgerToString(key3);
	LCD_displayCharacter('*');
    15c0:	8a e2       	ldi	r24, 0x2A	; 42
    15c2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key3);
    15c6:	80 91 39 01 	lds	r24, 0x0139
    15ca:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	aa ef       	ldi	r26, 0xFA	; 250
    15d4:	b4 e4       	ldi	r27, 0x44	; 68
    15d6:	8d ab       	std	Y+53, r24	; 0x35
    15d8:	9e ab       	std	Y+54, r25	; 0x36
    15da:	af ab       	std	Y+55, r26	; 0x37
    15dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6d a9       	ldd	r22, Y+53	; 0x35
    15e0:	7e a9       	ldd	r23, Y+54	; 0x36
    15e2:	8f a9       	ldd	r24, Y+55	; 0x37
    15e4:	98 ad       	ldd	r25, Y+56	; 0x38
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	89 ab       	std	Y+49, r24	; 0x31
    15f8:	9a ab       	std	Y+50, r25	; 0x32
    15fa:	ab ab       	std	Y+51, r26	; 0x33
    15fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1600:	7a a9       	ldd	r23, Y+50	; 0x32
    1602:	8b a9       	ldd	r24, Y+51	; 0x33
    1604:	9c a9       	ldd	r25, Y+52	; 0x34
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <enterPass+0x33e>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	98 ab       	std	Y+48, r25	; 0x30
    161c:	8f a7       	std	Y+47, r24	; 0x2f
    161e:	3f c0       	rjmp	.+126    	; 0x169e <enterPass+0x3bc>
	else if (__tmp > 65535)
    1620:	69 a9       	ldd	r22, Y+49	; 0x31
    1622:	7a a9       	ldd	r23, Y+50	; 0x32
    1624:	8b a9       	ldd	r24, Y+51	; 0x33
    1626:	9c a9       	ldd	r25, Y+52	; 0x34
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <enterPass+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6d a9       	ldd	r22, Y+53	; 0x35
    163a:	7e a9       	ldd	r23, Y+54	; 0x36
    163c:	8f a9       	ldd	r24, Y+55	; 0x37
    163e:	98 ad       	ldd	r25, Y+56	; 0x38
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	98 ab       	std	Y+48, r25	; 0x30
    165e:	8f a7       	std	Y+47, r24	; 0x2f
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <enterPass+0x39e>
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9e a7       	std	Y+46, r25	; 0x2e
    1668:	8d a7       	std	Y+45, r24	; 0x2d
    166a:	8d a5       	ldd	r24, Y+45	; 0x2d
    166c:	9e a5       	ldd	r25, Y+46	; 0x2e
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <enterPass+0x38c>
    1672:	9e a7       	std	Y+46, r25	; 0x2e
    1674:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8f a5       	ldd	r24, Y+47	; 0x2f
    1678:	98 a9       	ldd	r25, Y+48	; 0x30
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8f a5       	ldd	r24, Y+47	; 0x2f
    1682:	98 a9       	ldd	r25, Y+48	; 0x30
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <enterPass+0x380>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <enterPass+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	69 a9       	ldd	r22, Y+49	; 0x31
    168c:	7a a9       	ldd	r23, Y+50	; 0x32
    168e:	8b a9       	ldd	r24, Y+51	; 0x33
    1690:	9c a9       	ldd	r25, Y+52	; 0x34
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	98 ab       	std	Y+48, r25	; 0x30
    169c:	8f a7       	std	Y+47, r24	; 0x2f
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	9c a7       	std	Y+44, r25	; 0x2c
    16a4:	8b a7       	std	Y+43, r24	; 0x2b
    16a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <enterPass+0x3c8>
    16ae:	9c a7       	std	Y+44, r25	; 0x2c
    16b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);

	key4 = KeyPad_getPressedKey();
    16b2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    16b6:	80 93 35 01 	sts	0x0135, r24
	//LCD_intgerToString(key4);
	LCD_displayCharacter('*');
    16ba:	8a e2       	ldi	r24, 0x2A	; 42
    16bc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key4);
    16c0:	80 91 35 01 	lds	r24, 0x0135
    16c4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	aa ef       	ldi	r26, 0xFA	; 250
    16ce:	b4 e4       	ldi	r27, 0x44	; 68
    16d0:	8f a3       	std	Y+39, r24	; 0x27
    16d2:	98 a7       	std	Y+40, r25	; 0x28
    16d4:	a9 a7       	std	Y+41, r26	; 0x29
    16d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	6f a1       	ldd	r22, Y+39	; 0x27
    16da:	78 a5       	ldd	r23, Y+40	; 0x28
    16dc:	89 a5       	ldd	r24, Y+41	; 0x29
    16de:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8b a3       	std	Y+35, r24	; 0x23
    16f2:	9c a3       	std	Y+36, r25	; 0x24
    16f4:	ad a3       	std	Y+37, r26	; 0x25
    16f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f8:	6b a1       	ldd	r22, Y+35	; 0x23
    16fa:	7c a1       	ldd	r23, Y+36	; 0x24
    16fc:	8d a1       	ldd	r24, Y+37	; 0x25
    16fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <enterPass+0x438>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9a a3       	std	Y+34, r25	; 0x22
    1716:	89 a3       	std	Y+33, r24	; 0x21
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <enterPass+0x4b6>
	else if (__tmp > 65535)
    171a:	6b a1       	ldd	r22, Y+35	; 0x23
    171c:	7c a1       	ldd	r23, Y+36	; 0x24
    171e:	8d a1       	ldd	r24, Y+37	; 0x25
    1720:	9e a1       	ldd	r25, Y+38	; 0x26
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <enterPass+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	6f a1       	ldd	r22, Y+39	; 0x27
    1734:	78 a5       	ldd	r23, Y+40	; 0x28
    1736:	89 a5       	ldd	r24, Y+41	; 0x29
    1738:	9a a5       	ldd	r25, Y+42	; 0x2a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9a a3       	std	Y+34, r25	; 0x22
    1758:	89 a3       	std	Y+33, r24	; 0x21
    175a:	0f c0       	rjmp	.+30     	; 0x177a <enterPass+0x498>
    175c:	89 e1       	ldi	r24, 0x19	; 25
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	98 a3       	std	Y+32, r25	; 0x20
    1762:	8f 8f       	std	Y+31, r24	; 0x1f
    1764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1766:	98 a1       	ldd	r25, Y+32	; 0x20
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <enterPass+0x486>
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	89 a1       	ldd	r24, Y+33	; 0x21
    1772:	9a a1       	ldd	r25, Y+34	; 0x22
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <enterPass+0x47a>
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <enterPass+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	6b a1       	ldd	r22, Y+35	; 0x23
    1786:	7c a1       	ldd	r23, Y+36	; 0x24
    1788:	8d a1       	ldd	r24, Y+37	; 0x25
    178a:	9e a1       	ldd	r25, Y+38	; 0x26
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9a a3       	std	Y+34, r25	; 0x22
    1796:	89 a3       	std	Y+33, r24	; 0x21
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	9a a1       	ldd	r25, Y+34	; 0x22
    179c:	9e 8f       	std	Y+30, r25	; 0x1e
    179e:	8d 8f       	std	Y+29, r24	; 0x1d
    17a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <enterPass+0x4c2>
    17a8:	9e 8f       	std	Y+30, r25	; 0x1e
    17aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);

	key5 = KeyPad_getPressedKey();
    17ac:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    17b0:	80 93 36 01 	sts	0x0136, r24
	//LCD_intgerToString(key5);
	LCD_displayCharacter('*');
    17b4:	8a e2       	ldi	r24, 0x2A	; 42
    17b6:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
	UART_sendByte(key5);
    17ba:	80 91 36 01 	lds	r24, 0x0136
    17be:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	aa ef       	ldi	r26, 0xFA	; 250
    17c8:	b4 e4       	ldi	r27, 0x44	; 68
    17ca:	89 8f       	std	Y+25, r24	; 0x19
    17cc:	9a 8f       	std	Y+26, r25	; 0x1a
    17ce:	ab 8f       	std	Y+27, r26	; 0x1b
    17d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	69 8d       	ldd	r22, Y+25	; 0x19
    17d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	53 e4       	ldi	r21, 0x43	; 67
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8d 8b       	std	Y+21, r24	; 0x15
    17ec:	9e 8b       	std	Y+22, r25	; 0x16
    17ee:	af 8b       	std	Y+23, r26	; 0x17
    17f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17f2:	6d 89       	ldd	r22, Y+21	; 0x15
    17f4:	7e 89       	ldd	r23, Y+22	; 0x16
    17f6:	8f 89       	ldd	r24, Y+23	; 0x17
    17f8:	98 8d       	ldd	r25, Y+24	; 0x18
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <enterPass+0x532>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <enterPass+0x5b0>
	else if (__tmp > 65535)
    1814:	6d 89       	ldd	r22, Y+21	; 0x15
    1816:	7e 89       	ldd	r23, Y+22	; 0x16
    1818:	8f 89       	ldd	r24, Y+23	; 0x17
    181a:	98 8d       	ldd	r25, Y+24	; 0x18
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <enterPass+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	69 8d       	ldd	r22, Y+25	; 0x19
    182e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <enterPass+0x592>
    1856:	89 e1       	ldi	r24, 0x19	; 25
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9a 8b       	std	Y+18, r25	; 0x12
    185c:	89 8b       	std	Y+17, r24	; 0x11
    185e:	89 89       	ldd	r24, Y+17	; 0x11
    1860:	9a 89       	ldd	r25, Y+18	; 0x12
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <enterPass+0x580>
    1866:	9a 8b       	std	Y+18, r25	; 0x12
    1868:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8b 89       	ldd	r24, Y+19	; 0x13
    186c:	9c 89       	ldd	r25, Y+20	; 0x14
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9c 8b       	std	Y+20, r25	; 0x14
    1872:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8b 89       	ldd	r24, Y+19	; 0x13
    1876:	9c 89       	ldd	r25, Y+20	; 0x14
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <enterPass+0x574>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <enterPass+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	6d 89       	ldd	r22, Y+21	; 0x15
    1880:	7e 89       	ldd	r23, Y+22	; 0x16
    1882:	8f 89       	ldd	r24, Y+23	; 0x17
    1884:	98 8d       	ldd	r25, Y+24	; 0x18
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9c 8b       	std	Y+20, r25	; 0x14
    1890:	8b 8b       	std	Y+19, r24	; 0x13
    1892:	8b 89       	ldd	r24, Y+19	; 0x13
    1894:	9c 89       	ldd	r25, Y+20	; 0x14
    1896:	98 8b       	std	Y+16, r25	; 0x10
    1898:	8f 87       	std	Y+15, r24	; 0x0f
    189a:	8f 85       	ldd	r24, Y+15	; 0x0f
    189c:	98 89       	ldd	r25, Y+16	; 0x10
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <enterPass+0x5bc>
    18a2:	98 8b       	std	Y+16, r25	; 0x10
    18a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);

	key6 = KeyPad_getPressedKey();
    18a6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    18aa:	80 93 3b 01 	sts	0x013B, r24
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	aa ef       	ldi	r26, 0xFA	; 250
    18b4:	b4 e4       	ldi	r27, 0x44	; 68
    18b6:	8b 87       	std	Y+11, r24	; 0x0b
    18b8:	9c 87       	std	Y+12, r25	; 0x0c
    18ba:	ad 87       	std	Y+13, r26	; 0x0d
    18bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	53 e4       	ldi	r21, 0x43	; 67
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	a9 87       	std	Y+9, r26	; 0x09
    18dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <enterPass+0x61e>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <enterPass+0x69c>
	else if (__tmp > 65535)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <enterPass+0x688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <enterPass+0x67e>
    1942:	89 e1       	ldi	r24, 0x19	; 25
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <enterPass+0x66c>
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <enterPass+0x660>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <enterPass+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <enterPass+0x6a8>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	UART_sendByte(key6);
    1992:	80 91 3b 01 	lds	r24, 0x013B
    1996:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
}
    199a:	cc 5a       	subi	r28, 0xAC	; 172
    199c:	df 4f       	sbci	r29, 0xFF	; 255
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <rotateMotor>:

/*------------------------------------------------------------------------------
[Function Name]: rotateMotor
[Description]: This function is responsible to rotate motor CW and CCW and to stop it
------------------------------------------------------------------------------*/
void rotateMotor(){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	2e 97       	sbiw	r28, 0x0e	; 14
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(0x01); /*send byte to MC2 to rotate motor CW*/
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
	LCD_clearScreen(); /*clear LCD screen*/
    19cc:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
	LCD_displayString("Motor Rotating"); /*display string at 1st empty place in LCD*/
    19d0:	8e e9       	ldi	r24, 0x9E	; 158
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_displayString>
	LCD_displayStringRowColumn(1, 4, "CW"); /*display string @ row 1 col 4*/
    19d8:	2d ea       	ldi	r18, 0xAD	; 173
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	a9 01       	movw	r20, r18
    19e2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	fifteen = 1; /*turn flag = 1 to start counting 15 seconds in ISR*/
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 31 01 	sts	0x0131, r24
	g_tick = 0; /*clear ticks counter*/
    19ec:	10 92 2e 01 	sts	0x012E, r1
    19f0:	10 92 2d 01 	sts	0x012D, r1
	timer0_init_normal_mode(&Timer0_Config); /*initialize timer0*/
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	0e 94 d6 16 	call	0x2dac	; 0x2dac <timer0_init_normal_mode>
    19fc:	10 c0       	rjmp	.+32     	; 0x1a1e <rotateMotor+0x6c>
	while(fifteenSecondsFlag != 1){ /*loop until flag = 1*/
		LCD_goToRowColumn(1, 8); /*set LCD cursor @ row1 col 8*/
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	68 e0       	ldi	r22, 0x08	; 8
    1a02:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_goToRowColumn>
		LCD_intgerToString(g_tick/31);	/*display seconds on LCD*/
    1a06:	80 91 2d 01 	lds	r24, 0x012D
    1a0a:	90 91 2e 01 	lds	r25, 0x012E
    1a0e:	2f e1       	ldi	r18, 0x1F	; 31
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1a18:	cb 01       	movw	r24, r22
    1a1a:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_intgerToString>
	LCD_displayString("Motor Rotating"); /*display string at 1st empty place in LCD*/
	LCD_displayStringRowColumn(1, 4, "CW"); /*display string @ row 1 col 4*/
	fifteen = 1; /*turn flag = 1 to start counting 15 seconds in ISR*/
	g_tick = 0; /*clear ticks counter*/
	timer0_init_normal_mode(&Timer0_Config); /*initialize timer0*/
	while(fifteenSecondsFlag != 1){ /*loop until flag = 1*/
    1a1e:	80 91 2f 01 	lds	r24, 0x012F
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	61 f7       	brne	.-40     	; 0x19fe <rotateMotor+0x4c>
		LCD_goToRowColumn(1, 8); /*set LCD cursor @ row1 col 8*/
		LCD_intgerToString(g_tick/31);	/*display seconds on LCD*/
	}
	fifteen = 0; /*clear flag*/
    1a26:	10 92 31 01 	sts	0x0131, r1
	fifteenSecondsFlag = 0; /*clear flag*/
    1a2a:	10 92 2f 01 	sts	0x012F, r1

	UART_sendByte(0x03); /*send byte to MC2 to stop the motor*/
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
	LCD_clearScreen(); /*clear screen*/
    1a34:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
	LCD_displayString("Motor Stopped"); /*display string on LCD @ 1st empty place*/
    1a38:	80 eb       	ldi	r24, 0xB0	; 176
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_displayString>
	three = 1; /*turn flag = 1 to start counting 3 seconds in the ISR*/
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 32 01 	sts	0x0132, r24
	timer0_init_normal_mode(&Timer0_Config); /*initialize timer0 again to reset values*/
    1a46:	80 e2       	ldi	r24, 0x20	; 32
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <timer0_init_normal_mode>
    1a4e:	10 c0       	rjmp	.+32     	; 0x1a70 <rotateMotor+0xbe>
	while(threeSecondsFlag != 1){ /*loop until flag = 1*/
		LCD_goToRowColumn(1, 8); /*set LCD cursor @ row1 col 8*/
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	68 e0       	ldi	r22, 0x08	; 8
    1a54:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_goToRowColumn>
		LCD_intgerToString(g_tick/31); /*display seconds on LCD*/
    1a58:	80 91 2d 01 	lds	r24, 0x012D
    1a5c:	90 91 2e 01 	lds	r25, 0x012E
    1a60:	2f e1       	ldi	r18, 0x1F	; 31
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_intgerToString>
	UART_sendByte(0x03); /*send byte to MC2 to stop the motor*/
	LCD_clearScreen(); /*clear screen*/
	LCD_displayString("Motor Stopped"); /*display string on LCD @ 1st empty place*/
	three = 1; /*turn flag = 1 to start counting 3 seconds in the ISR*/
	timer0_init_normal_mode(&Timer0_Config); /*initialize timer0 again to reset values*/
	while(threeSecondsFlag != 1){ /*loop until flag = 1*/
    1a70:	80 91 30 01 	lds	r24, 0x0130
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	61 f7       	brne	.-40     	; 0x1a50 <rotateMotor+0x9e>
		LCD_goToRowColumn(1, 8); /*set LCD cursor @ row1 col 8*/
		LCD_intgerToString(g_tick/31); /*display seconds on LCD*/
	}
	three = 0; /*clear flag*/
    1a78:	10 92 32 01 	sts	0x0132, r1
	threeSecondsFlag = 0; /*clear flag*/
    1a7c:	10 92 30 01 	sts	0x0130, r1

	UART_sendByte(0x02); /*send byte to MC2 to rotate the motor CCW*/
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
	LCD_clearScreen();
    1a86:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
	LCD_displayString("Motor Rotating");
    1a8a:	8e e9       	ldi	r24, 0x9E	; 158
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_displayString>
	LCD_displayStringRowColumn(1, 4, "CCW");
    1a92:	2e eb       	ldi	r18, 0xBE	; 190
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	fifteen = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	80 93 31 01 	sts	0x0131, r24
	g_tick = 0;
    1aa6:	10 92 2e 01 	sts	0x012E, r1
    1aaa:	10 92 2d 01 	sts	0x012D, r1
	timer0_init_normal_mode(&Timer0_Config);
    1aae:	80 e2       	ldi	r24, 0x20	; 32
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	0e 94 d6 16 	call	0x2dac	; 0x2dac <timer0_init_normal_mode>
    1ab6:	10 c0       	rjmp	.+32     	; 0x1ad8 <rotateMotor+0x126>
	while(fifteenSecondsFlag != 1){
		LCD_goToRowColumn(1, 8);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	68 e0       	ldi	r22, 0x08	; 8
    1abc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_goToRowColumn>
		LCD_intgerToString(g_tick/31);
    1ac0:	80 91 2d 01 	lds	r24, 0x012D
    1ac4:	90 91 2e 01 	lds	r25, 0x012E
    1ac8:	2f e1       	ldi	r18, 0x1F	; 31
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	b9 01       	movw	r22, r18
    1ace:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_intgerToString>
	LCD_displayString("Motor Rotating");
	LCD_displayStringRowColumn(1, 4, "CCW");
	fifteen = 1;
	g_tick = 0;
	timer0_init_normal_mode(&Timer0_Config);
	while(fifteenSecondsFlag != 1){
    1ad8:	80 91 2f 01 	lds	r24, 0x012F
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	61 f7       	brne	.-40     	; 0x1ab8 <rotateMotor+0x106>
		LCD_goToRowColumn(1, 8);
		LCD_intgerToString(g_tick/31);
	}
	fifteen = 0;
    1ae0:	10 92 31 01 	sts	0x0131, r1
	fifteenSecondsFlag = 0;
    1ae4:	10 92 2f 01 	sts	0x012F, r1

	UART_sendByte(0x04); /*send byte to MC2 to inform that the motor function has ended*/
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	aa ef       	ldi	r26, 0xFA	; 250
    1af4:	b4 e4       	ldi	r27, 0x44	; 68
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    1af8:	9c 87       	std	Y+12, r25	; 0x0c
    1afa:	ad 87       	std	Y+13, r26	; 0x0d
    1afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a e7       	ldi	r20, 0x7A	; 122
    1b0c:	53 e4       	ldi	r21, 0x43	; 67
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8f 83       	std	Y+7, r24	; 0x07
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	a9 87       	std	Y+9, r26	; 0x09
    1b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <rotateMotor+0x18e>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <rotateMotor+0x20c>
	else if (__tmp > 65535)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <rotateMotor+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <rotateMotor+0x1ee>
    1b82:	89 e1       	ldi	r24, 0x19	; 25
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <rotateMotor+0x1dc>
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <rotateMotor+0x1d0>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <rotateMotor+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <rotateMotor+0x218>
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /*delay 2 seconds*/
}
    1bd2:	2e 96       	adiw	r28, 0x0e	; 14
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <keyChoice_fn>:

/*------------------------------------------------------------------------------
[Function Name]: keyChoice_fn
[Description]: This function is responsible for getting the required action from user and execute it using the suitable functions
------------------------------------------------------------------------------*/
void keyChoice_fn(){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	aa 97       	sbiw	r28, 0x2a	; 42
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen(); /*clear LCD screen*/
    1bf8:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 2, "+: Change Pass"); /*display string @ row 0 col 2*/
    1bfc:	22 ec       	ldi	r18, 0xC2	; 194
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	a9 01       	movw	r20, r18
    1c06:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "-: Open Door"); /*display string @ row 1 col 2*/
    1c0a:	21 ed       	ldi	r18, 0xD1	; 209
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	a9 01       	movw	r20, r18
    1c14:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
	keyChoice = KeyPad_getPressedKey(); /*get pressed key from keypad*/
    1c18:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <KeyPad_getPressedKey>
    1c1c:	80 93 37 01 	sts	0x0137, r24
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	aa ef       	ldi	r26, 0xFA	; 250
    1c26:	b4 e4       	ldi	r27, 0x44	; 68
    1c28:	8f a3       	std	Y+39, r24	; 0x27
    1c2a:	98 a7       	std	Y+40, r25	; 0x28
    1c2c:	a9 a7       	std	Y+41, r26	; 0x29
    1c2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6f a1       	ldd	r22, Y+39	; 0x27
    1c32:	78 a5       	ldd	r23, Y+40	; 0x28
    1c34:	89 a5       	ldd	r24, Y+41	; 0x29
    1c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a e7       	ldi	r20, 0x7A	; 122
    1c3e:	53 e4       	ldi	r21, 0x43	; 67
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8b a3       	std	Y+35, r24	; 0x23
    1c4a:	9c a3       	std	Y+36, r25	; 0x24
    1c4c:	ad a3       	std	Y+37, r26	; 0x25
    1c4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <keyChoice_fn+0x8e>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <keyChoice_fn+0x10c>
	else if (__tmp > 65535)
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <keyChoice_fn+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9a a3       	std	Y+34, r25	; 0x22
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <keyChoice_fn+0xee>
    1cb4:	89 e1       	ldi	r24, 0x19	; 25
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	98 a3       	std	Y+32, r25	; 0x20
    1cba:	8f 8f       	std	Y+31, r24	; 0x1f
    1cbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cbe:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <keyChoice_fn+0xdc>
    1cc4:	98 a3       	std	Y+32, r25	; 0x20
    1cc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	9a a3       	std	Y+34, r25	; 0x22
    1cd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <keyChoice_fn+0xd0>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <keyChoice_fn+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cde:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <keyChoice_fn+0x118>
    1d00:	9e 8f       	std	Y+30, r25	; 0x1e
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000); /*delay 2 seconds*/

	/* '+': change pass
	 * '-': rotate motor*/
	if(keyChoice == '+'){ /*check if '+' is pressed on keypad to change password*/
    1d04:	80 91 37 01 	lds	r24, 0x0137
    1d08:	8b 32       	cpi	r24, 0x2B	; 43
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <keyChoice_fn+0x12a>
    1d0c:	c8 c0       	rjmp	.+400    	; 0x1e9e <keyChoice_fn+0x2ba>
		UART_sendByte(0x20); /*send byte to MC2 to ask user to enter password*/
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		enterPass(); /*cal enterPass function to check for user's pass*/
    1d14:	0e 94 71 09 	call	0x12e2	; 0x12e2 <enterPass>
		matchCheck = UART_recieveByte(); /*receive a check byte from MC2*/
    1d18:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    1d1c:	80 93 3c 01 	sts	0x013C, r24
    1d20:	ab c0       	rjmp	.+342    	; 0x1e78 <keyChoice_fn+0x294>
		while(matchCheck != 0x05){ /*loop until password entered is correct*/
			error++; /*increment error counter every time entered password is wrong*/
    1d22:	80 91 2c 01 	lds	r24, 0x012C
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	80 93 2c 01 	sts	0x012C, r24
			if(error == 3){ /*check if user entred password 3 times wrong*/
    1d2c:	80 91 2c 01 	lds	r24, 0x012C
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	69 f4       	brne	.+26     	; 0x1d4e <keyChoice_fn+0x16a>
				LCD_clearScreen(); /*clear LCD screen*/
    1d34:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Error ya haramy"); /*display error messege on LCD @ row 0 col 1*/
    1d38:	2e ed       	ldi	r18, 0xDE	; 222
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	a9 01       	movw	r20, r18
    1d42:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
				UART_sendByte(0x55); /*send byte to MC2 to start buzzer*/
    1d46:	85 e5       	ldi	r24, 0x55	; 85
    1d48:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    1d4c:	ff cf       	rjmp	.-2      	; 0x1d4c <keyChoice_fn+0x168>
				while(1); /*hold the code*/
			}
			/*if it is not the 3rd time wrong pass just ask the user for a try again*/
			LCD_clearScreen();
    1d4e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Try again");
    1d52:	2e ee       	ldi	r18, 0xEE	; 238
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	63 e0       	ldi	r22, 0x03	; 3
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Remaining: ");
    1d60:	28 ef       	ldi	r18, 0xF8	; 248
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	a9 01       	movw	r20, r18
    1d6a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
			LCD_intgerToString(3-error);
    1d6e:	80 91 2c 01 	lds	r24, 0x012C
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	82 1b       	sub	r24, r18
    1d7c:	93 0b       	sbc	r25, r19
    1d7e:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_intgerToString>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e4       	ldi	r25, 0x40	; 64
    1d86:	ac e9       	ldi	r26, 0x9C	; 156
    1d88:	b5 e4       	ldi	r27, 0x45	; 69
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8d 8b       	std	Y+21, r24	; 0x15
    1dac:	9e 8b       	std	Y+22, r25	; 0x16
    1dae:	af 8b       	std	Y+23, r26	; 0x17
    1db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <keyChoice_fn+0x1f0>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <keyChoice_fn+0x26e>
	else if (__tmp > 65535)
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <keyChoice_fn+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <keyChoice_fn+0x250>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <keyChoice_fn+0x23e>
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <keyChoice_fn+0x232>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <keyChoice_fn+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	98 89       	ldd	r25, Y+16	; 0x10
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <keyChoice_fn+0x27a>
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5000);
			/*check password entered*/
			UART_sendByte(0x20);
    1e66:	80 e2       	ldi	r24, 0x20	; 32
    1e68:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
			enterPass();
    1e6c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <enterPass>
			matchCheck = UART_recieveByte();
    1e70:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    1e74:	80 93 3c 01 	sts	0x013C, r24
	 * '-': rotate motor*/
	if(keyChoice == '+'){ /*check if '+' is pressed on keypad to change password*/
		UART_sendByte(0x20); /*send byte to MC2 to ask user to enter password*/
		enterPass(); /*cal enterPass function to check for user's pass*/
		matchCheck = UART_recieveByte(); /*receive a check byte from MC2*/
		while(matchCheck != 0x05){ /*loop until password entered is correct*/
    1e78:	80 91 3c 01 	lds	r24, 0x013C
    1e7c:	85 30       	cpi	r24, 0x05	; 5
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <keyChoice_fn+0x29e>
    1e80:	50 cf       	rjmp	.-352    	; 0x1d22 <keyChoice_fn+0x13e>
			/*check password entered*/
			UART_sendByte(0x20);
			enterPass();
			matchCheck = UART_recieveByte();
		}
		error = 0; /*clear error count for further usage*/
    1e82:	10 92 2c 01 	sts	0x012C, r1
		/*start changing password by user*/
		UART_sendByte(0x21);
    1e86:	81 e2       	ldi	r24, 0x21	; 33
    1e88:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		enterPassFirst();
    1e8c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <enterPassFirst>
		passCount=0;
    1e90:	10 92 2a 01 	sts	0x012A, r1
		matchCheck = UART_recieveByte();
    1e94:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    1e98:	80 93 3c 01 	sts	0x013C, r24
    1e9c:	c6 c0       	rjmp	.+396    	; 0x202a <keyChoice_fn+0x446>
	}else if(keyChoice == '-'){ /*check if '-' is pressed on keypad to open door*/
    1e9e:	80 91 37 01 	lds	r24, 0x0137
    1ea2:	8d 32       	cpi	r24, 0x2D	; 45
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <keyChoice_fn+0x2c4>
    1ea6:	c1 c0       	rjmp	.+386    	; 0x202a <keyChoice_fn+0x446>
		/*ask user to enter password*/
		UART_sendByte(0x20);
    1ea8:	80 e2       	ldi	r24, 0x20	; 32
    1eaa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		enterPass();
    1eae:	0e 94 71 09 	call	0x12e2	; 0x12e2 <enterPass>
		matchCheck = UART_recieveByte(); /*check for password*/
    1eb2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    1eb6:	80 93 3c 01 	sts	0x013C, r24
    1eba:	ab c0       	rjmp	.+342    	; 0x2012 <keyChoice_fn+0x42e>
		while(matchCheck != 0x05){
			error++;
    1ebc:	80 91 2c 01 	lds	r24, 0x012C
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	80 93 2c 01 	sts	0x012C, r24
			if(error == 3){
    1ec6:	80 91 2c 01 	lds	r24, 0x012C
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <keyChoice_fn+0x304>
				LCD_clearScreen();
    1ece:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Error ya haramy");
    1ed2:	2e ed       	ldi	r18, 0xDE	; 222
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	a9 01       	movw	r20, r18
    1edc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
				UART_sendByte(0x55); //buzzer
    1ee0:	85 e5       	ldi	r24, 0x55	; 85
    1ee2:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
    1ee6:	ff cf       	rjmp	.-2      	; 0x1ee6 <keyChoice_fn+0x302>
				while(1);
			}
			LCD_clearScreen();
    1ee8:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Try again");
    1eec:	2e ee       	ldi	r18, 0xEE	; 238
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	63 e0       	ldi	r22, 0x03	; 3
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Remaining: ");
    1efa:	28 ef       	ldi	r18, 0xF8	; 248
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
			LCD_intgerToString(3-error);
    1f08:	80 91 2c 01 	lds	r24, 0x012C
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	82 1b       	sub	r24, r18
    1f16:	93 0b       	sbc	r25, r19
    1f18:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_intgerToString>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e4       	ldi	r25, 0x40	; 64
    1f20:	ac e9       	ldi	r26, 0x9C	; 156
    1f22:	b5 e4       	ldi	r27, 0x45	; 69
    1f24:	8b 87       	std	Y+11, r24	; 0x0b
    1f26:	9c 87       	std	Y+12, r25	; 0x0c
    1f28:	ad 87       	std	Y+13, r26	; 0x0d
    1f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8f 83       	std	Y+7, r24	; 0x07
    1f46:	98 87       	std	Y+8, r25	; 0x08
    1f48:	a9 87       	std	Y+9, r26	; 0x09
    1f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <keyChoice_fn+0x38a>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <keyChoice_fn+0x408>
	else if (__tmp > 65535)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <keyChoice_fn+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <keyChoice_fn+0x3ea>
    1fb0:	89 e1       	ldi	r24, 0x19	; 25
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <keyChoice_fn+0x3d8>
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <keyChoice_fn+0x3cc>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <keyChoice_fn+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <keyChoice_fn+0x414>
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
			UART_sendByte(0x20);
    2000:	80 e2       	ldi	r24, 0x20	; 32
    2002:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
			enterPass();
    2006:	0e 94 71 09 	call	0x12e2	; 0x12e2 <enterPass>
			matchCheck = UART_recieveByte();
    200a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    200e:	80 93 3c 01 	sts	0x013C, r24
	}else if(keyChoice == '-'){ /*check if '-' is pressed on keypad to open door*/
		/*ask user to enter password*/
		UART_sendByte(0x20);
		enterPass();
		matchCheck = UART_recieveByte(); /*check for password*/
		while(matchCheck != 0x05){
    2012:	80 91 3c 01 	lds	r24, 0x013C
    2016:	85 30       	cpi	r24, 0x05	; 5
    2018:	09 f0       	breq	.+2      	; 0x201c <keyChoice_fn+0x438>
    201a:	50 cf       	rjmp	.-352    	; 0x1ebc <keyChoice_fn+0x2d8>
			_delay_ms(5000);
			UART_sendByte(0x20);
			enterPass();
			matchCheck = UART_recieveByte();
		}
		error = 0;
    201c:	10 92 2c 01 	sts	0x012C, r1
		/*start rotating motor*/
		UART_sendByte(0x22); /*send byte to MC2 to rotate motor*/
    2020:	82 e2       	ldi	r24, 0x22	; 34
    2022:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		rotateMotor();
    2026:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <rotateMotor>
	}
}
    202a:	aa 96       	adiw	r28, 0x2a	; 42
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <main>:


int main(){
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	2e 97       	sbiw	r28, 0x0e	; 14
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
	timer0_setCallBack(timer_fn); /*timer0 set call back function*/
    2050:	83 ea       	ldi	r24, 0xA3	; 163
    2052:	95 e0       	ldi	r25, 0x05	; 5
    2054:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <timer0_setCallBack>
	UART_init(&UART_config); /*initialize UART driver*/
    2058:	84 e2       	ldi	r24, 0x24	; 36
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <UART_init>
	LCD_init(); /*initialize LCD driver*/
    2060:	0e 94 df 11 	call	0x23be	; 0x23be <LCD_init>
	while(1){ /*infinite loop*/
		if(trial == 0){ /*check if it is the 1st time to enter new password*/
    2064:	80 91 2b 01 	lds	r24, 0x012B
    2068:	88 23       	and	r24, r24
    206a:	81 f4       	brne	.+32     	; 0x208c <main+0x50>
			UART_sendByte(0x21); /*send byte to MC2 to enter password*/
    206c:	81 e2       	ldi	r24, 0x21	; 33
    206e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
			enterPassFirst(); /*call function to enter password for the 1st time and to re-enter it*/
    2072:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <enterPassFirst>
			passCount = 0; /*clear counter*/
    2076:	10 92 2a 01 	sts	0x012A, r1
			trial++; /*increment counter by 1*/
    207a:	80 91 2b 01 	lds	r24, 0x012B
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 93 2b 01 	sts	0x012B, r24
			matchCheck = UART_recieveByte(); /*check that the password and its re-entered one is matching*/
    2084:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    2088:	80 93 3c 01 	sts	0x013C, r24
		}

		if(matchCheck == 0x11){ /*check for unmatched new password*/
    208c:	80 91 3c 01 	lds	r24, 0x013C
    2090:	81 31       	cpi	r24, 0x11	; 17
    2092:	09 f0       	breq	.+2      	; 0x2096 <main+0x5a>
    2094:	8e c0       	rjmp	.+284    	; 0x21b2 <main+0x176>
			LCD_clearScreen();
    2096:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3,"Unmatched");
    209a:	24 e0       	ldi	r18, 0x04	; 4
    209c:	31 e0       	ldi	r19, 0x01	; 1
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	a9 01       	movw	r20, r18
    20a4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 3, "Try Again");
    20a8:	2e e0       	ldi	r18, 0x0E	; 14
    20aa:	31 e0       	ldi	r19, 0x01	; 1
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	a9 01       	movw	r20, r18
    20b2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <LCD_displayStringRowColumn>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e4       	ldi	r25, 0x40	; 64
    20ba:	ac e9       	ldi	r26, 0x9C	; 156
    20bc:	b5 e4       	ldi	r27, 0x45	; 69
    20be:	8b 87       	std	Y+11, r24	; 0x0b
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	ad 87       	std	Y+13, r26	; 0x0d
    20c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8f 83       	std	Y+7, r24	; 0x07
    20e0:	98 87       	std	Y+8, r25	; 0x08
    20e2:	a9 87       	std	Y+9, r26	; 0x09
    20e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <main+0xcc>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <main+0x14a>
	else if (__tmp > 65535)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <main+0x12c>
    214a:	89 e1       	ldi	r24, 0x19	; 25
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <main+0x11a>
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <main+0x10e>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <main+0x156>
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
			UART_sendByte(0x21); /*send byte to MC2 to create new password again*/
    219a:	81 e2       	ldi	r24, 0x21	; 33
    219c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
			enterPassFirst();
    21a0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <enterPassFirst>
			passCount = 0;
    21a4:	10 92 2a 01 	sts	0x012A, r1
			matchCheck = UART_recieveByte(); /*check that the password and its re-entered one is matching*/
    21a8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    21ac:	80 93 3c 01 	sts	0x013C, r24
    21b0:	59 cf       	rjmp	.-334    	; 0x2064 <main+0x28>
		}else if(matchCheck == 0x05){ /*check for matched new password*/
    21b2:	80 91 3c 01 	lds	r24, 0x013C
    21b6:	85 30       	cpi	r24, 0x05	; 5
    21b8:	09 f0       	breq	.+2      	; 0x21bc <main+0x180>
    21ba:	54 cf       	rjmp	.-344    	; 0x2064 <main+0x28>
			keyChoice_fn(); /*go ask user for which function he wants whether to open door or to change password*/
    21bc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <keyChoice_fn>
    21c0:	51 cf       	rjmp	.-350    	; 0x2064 <main+0x28>

000021c2 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <KeyPad_getPressedKey+0x6>
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    21cc:	1a 82       	std	Y+2, r1	; 0x02
    21ce:	4c c0       	rjmp	.+152    	; 0x2268 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    21d0:	ea e3       	ldi	r30, 0x3A	; 58
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	80 e1       	ldi	r24, 0x10	; 16
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <KeyPad_getPressedKey+0x22>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	2a 95       	dec	r18
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <KeyPad_getPressedKey+0x1e>
    21e8:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    21ea:	eb e3       	ldi	r30, 0x3B	; 59
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	80 e1       	ldi	r24, 0x10	; 16
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <KeyPad_getPressedKey+0x3e>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <KeyPad_getPressedKey+0x3a>
    2204:	80 95       	com	r24
    2206:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    2208:	19 82       	std	Y+1, r1	; 0x01
    220a:	28 c0       	rjmp	.+80     	; 0x225c <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    220c:	e9 e3       	ldi	r30, 0x39	; 57
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a9 01       	movw	r20, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <KeyPad_getPressedKey+0x62>
    2220:	55 95       	asr	r21
    2222:	47 95       	ror	r20
    2224:	8a 95       	dec	r24
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <KeyPad_getPressedKey+0x5e>
    2228:	ca 01       	movw	r24, r20
    222a:	81 70       	andi	r24, 0x01	; 1
    222c:	90 70       	andi	r25, 0x00	; 0
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	91 f4       	brne	.+36     	; 0x2256 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	98 2f       	mov	r25, r24
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	89 0f       	add	r24, r25
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	0e 94 39 11 	call	0x2272	; 0x2272 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	8f 5f       	subi	r24, 0xFF	; 255
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	a8 f2       	brcs	.-86     	; 0x220c <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	8a 83       	std	Y+2, r24	; 0x02
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	84 30       	cpi	r24, 0x04	; 4
    226c:	08 f4       	brcc	.+2      	; 0x2270 <KeyPad_getPressedKey+0xae>
    226e:	b0 cf       	rjmp	.-160    	; 0x21d0 <KeyPad_getPressedKey+0xe>
    2270:	ad cf       	rjmp	.-166    	; 0x21cc <KeyPad_getPressedKey+0xa>

00002272 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <KeyPad_4x4_adjustKeyNumber+0x6>
    2278:	00 d0       	rcall	.+0      	; 0x227a <KeyPad_4x4_adjustKeyNumber+0x8>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	3c 83       	std	Y+4, r19	; 0x04
    2288:	2b 83       	std	Y+3, r18	; 0x03
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	91 05       	cpc	r25, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <KeyPad_4x4_adjustKeyNumber+0x24>
    2294:	70 c0       	rjmp	.+224    	; 0x2376 <KeyPad_4x4_adjustKeyNumber+0x104>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	29 30       	cpi	r18, 0x09	; 9
    229c:	31 05       	cpc	r19, r1
    229e:	5c f5       	brge	.+86     	; 0x22f6 <KeyPad_4x4_adjustKeyNumber+0x84>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	84 30       	cpi	r24, 0x04	; 4
    22a6:	91 05       	cpc	r25, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <KeyPad_4x4_adjustKeyNumber+0x3a>
    22aa:	59 c0       	rjmp	.+178    	; 0x235e <KeyPad_4x4_adjustKeyNumber+0xec>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	25 30       	cpi	r18, 0x05	; 5
    22b2:	31 05       	cpc	r19, r1
    22b4:	9c f4       	brge	.+38     	; 0x22dc <KeyPad_4x4_adjustKeyNumber+0x6a>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	82 30       	cpi	r24, 0x02	; 2
    22bc:	91 05       	cpc	r25, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <KeyPad_4x4_adjustKeyNumber+0x50>
    22c0:	48 c0       	rjmp	.+144    	; 0x2352 <KeyPad_4x4_adjustKeyNumber+0xe0>
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	23 30       	cpi	r18, 0x03	; 3
    22c8:	31 05       	cpc	r19, r1
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <KeyPad_4x4_adjustKeyNumber+0x5c>
    22cc:	45 c0       	rjmp	.+138    	; 0x2358 <KeyPad_4x4_adjustKeyNumber+0xe6>
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	09 f4       	brne	.+2      	; 0x22da <KeyPad_4x4_adjustKeyNumber+0x68>
    22d8:	39 c0       	rjmp	.+114    	; 0x234c <KeyPad_4x4_adjustKeyNumber+0xda>
    22da:	67 c0       	rjmp	.+206    	; 0x23aa <KeyPad_4x4_adjustKeyNumber+0x138>
    22dc:	2b 81       	ldd	r18, Y+3	; 0x03
    22de:	3c 81       	ldd	r19, Y+4	; 0x04
    22e0:	26 30       	cpi	r18, 0x06	; 6
    22e2:	31 05       	cpc	r19, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <KeyPad_4x4_adjustKeyNumber+0x76>
    22e6:	41 c0       	rjmp	.+130    	; 0x236a <KeyPad_4x4_adjustKeyNumber+0xf8>
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	87 30       	cpi	r24, 0x07	; 7
    22ee:	91 05       	cpc	r25, r1
    22f0:	0c f0       	brlt	.+2      	; 0x22f4 <KeyPad_4x4_adjustKeyNumber+0x82>
    22f2:	3e c0       	rjmp	.+124    	; 0x2370 <KeyPad_4x4_adjustKeyNumber+0xfe>
    22f4:	37 c0       	rjmp	.+110    	; 0x2364 <KeyPad_4x4_adjustKeyNumber+0xf2>
    22f6:	2b 81       	ldd	r18, Y+3	; 0x03
    22f8:	3c 81       	ldd	r19, Y+4	; 0x04
    22fa:	2c 30       	cpi	r18, 0x0C	; 12
    22fc:	31 05       	cpc	r19, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <KeyPad_4x4_adjustKeyNumber+0x90>
    2300:	46 c0       	rjmp	.+140    	; 0x238e <KeyPad_4x4_adjustKeyNumber+0x11c>
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	8d 30       	cpi	r24, 0x0D	; 13
    2308:	91 05       	cpc	r25, r1
    230a:	5c f4       	brge	.+22     	; 0x2322 <KeyPad_4x4_adjustKeyNumber+0xb0>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	2a 30       	cpi	r18, 0x0A	; 10
    2312:	31 05       	cpc	r19, r1
    2314:	b1 f1       	breq	.+108    	; 0x2382 <KeyPad_4x4_adjustKeyNumber+0x110>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	8b 30       	cpi	r24, 0x0B	; 11
    231c:	91 05       	cpc	r25, r1
    231e:	a4 f5       	brge	.+104    	; 0x2388 <KeyPad_4x4_adjustKeyNumber+0x116>
    2320:	2d c0       	rjmp	.+90     	; 0x237c <KeyPad_4x4_adjustKeyNumber+0x10a>
    2322:	2b 81       	ldd	r18, Y+3	; 0x03
    2324:	3c 81       	ldd	r19, Y+4	; 0x04
    2326:	2e 30       	cpi	r18, 0x0E	; 14
    2328:	31 05       	cpc	r19, r1
    232a:	b9 f1       	breq	.+110    	; 0x239a <KeyPad_4x4_adjustKeyNumber+0x128>
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	8e 30       	cpi	r24, 0x0E	; 14
    2332:	91 05       	cpc	r25, r1
    2334:	7c f1       	brlt	.+94     	; 0x2394 <KeyPad_4x4_adjustKeyNumber+0x122>
    2336:	2b 81       	ldd	r18, Y+3	; 0x03
    2338:	3c 81       	ldd	r19, Y+4	; 0x04
    233a:	2f 30       	cpi	r18, 0x0F	; 15
    233c:	31 05       	cpc	r19, r1
    233e:	79 f1       	breq	.+94     	; 0x239e <KeyPad_4x4_adjustKeyNumber+0x12c>
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	80 31       	cpi	r24, 0x10	; 16
    2346:	91 05       	cpc	r25, r1
    2348:	69 f1       	breq	.+90     	; 0x23a4 <KeyPad_4x4_adjustKeyNumber+0x132>
    234a:	2f c0       	rjmp	.+94     	; 0x23aa <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    234c:	97 e0       	ldi	r25, 0x07	; 7
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	2e c0       	rjmp	.+92     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    2352:	28 e0       	ldi	r18, 0x08	; 8
    2354:	2a 83       	std	Y+2, r18	; 0x02
    2356:	2b c0       	rjmp	.+86     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    2358:	39 e0       	ldi	r19, 0x09	; 9
    235a:	3a 83       	std	Y+2, r19	; 0x02
    235c:	28 c0       	rjmp	.+80     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    235e:	85 e2       	ldi	r24, 0x25	; 37
    2360:	8a 83       	std	Y+2, r24	; 0x02
    2362:	25 c0       	rjmp	.+74     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2364:	94 e0       	ldi	r25, 0x04	; 4
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	22 c0       	rjmp	.+68     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    236a:	25 e0       	ldi	r18, 0x05	; 5
    236c:	2a 83       	std	Y+2, r18	; 0x02
    236e:	1f c0       	rjmp	.+62     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    2370:	36 e0       	ldi	r19, 0x06	; 6
    2372:	3a 83       	std	Y+2, r19	; 0x02
    2374:	1c c0       	rjmp	.+56     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2376:	8a e2       	ldi	r24, 0x2A	; 42
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	19 c0       	rjmp	.+50     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	16 c0       	rjmp	.+44     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    2382:	22 e0       	ldi	r18, 0x02	; 2
    2384:	2a 83       	std	Y+2, r18	; 0x02
    2386:	13 c0       	rjmp	.+38     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2388:	33 e0       	ldi	r19, 0x03	; 3
    238a:	3a 83       	std	Y+2, r19	; 0x02
    238c:	10 c0       	rjmp	.+32     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    238e:	8d e2       	ldi	r24, 0x2D	; 45
    2390:	8a 83       	std	Y+2, r24	; 0x02
    2392:	0d c0       	rjmp	.+26     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2394:	9d e0       	ldi	r25, 0x0D	; 13
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	0a c0       	rjmp	.+20     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    239a:	1a 82       	std	Y+2, r1	; 0x02
    239c:	08 c0       	rjmp	.+16     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    239e:	2d e3       	ldi	r18, 0x3D	; 61
    23a0:	2a 83       	std	Y+2, r18	; 0x02
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    23a4:	3b e2       	ldi	r19, 0x2B	; 43
    23a6:	3a 83       	std	Y+2, r19	; 0x02
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	8a 83       	std	Y+2, r24	; 0x02
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    23c6:	a1 e3       	ldi	r26, 0x31	; 49
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e1 e3       	ldi	r30, 0x31	; 49
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	8c 61       	ori	r24, 0x1C	; 28
    23d2:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    23d4:	e4 e3       	ldi	r30, 0x34	; 52
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    23dc:	88 e3       	ldi	r24, 0x38	; 56
    23de:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    23e2:	8c e0       	ldi	r24, 0x0C	; 12
    23e4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_sendCommand>
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	e9 97       	sbiw	r28, 0x39	; 57
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    240a:	a2 e3       	ldi	r26, 0x32	; 50
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e2 e3       	ldi	r30, 0x32	; 50
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	8b 7f       	andi	r24, 0xFB	; 251
    2416:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2418:	a2 e3       	ldi	r26, 0x32	; 50
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e2 e3       	ldi	r30, 0x32	; 50
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	87 7f       	andi	r24, 0xF7	; 247
    2424:	8c 93       	st	X, r24
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	8d ab       	std	Y+53, r24	; 0x35
    2430:	9e ab       	std	Y+54, r25	; 0x36
    2432:	af ab       	std	Y+55, r26	; 0x37
    2434:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6d a9       	ldd	r22, Y+53	; 0x35
    2438:	7e a9       	ldd	r23, Y+54	; 0x36
    243a:	8f a9       	ldd	r24, Y+55	; 0x37
    243c:	98 ad       	ldd	r25, Y+56	; 0x38
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a e7       	ldi	r20, 0x7A	; 122
    2444:	53 e4       	ldi	r21, 0x43	; 67
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	89 ab       	std	Y+49, r24	; 0x31
    2450:	9a ab       	std	Y+50, r25	; 0x32
    2452:	ab ab       	std	Y+51, r26	; 0x33
    2454:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2456:	69 a9       	ldd	r22, Y+49	; 0x31
    2458:	7a a9       	ldd	r23, Y+50	; 0x32
    245a:	8b a9       	ldd	r24, Y+51	; 0x33
    245c:	9c a9       	ldd	r25, Y+52	; 0x34
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <LCD_sendCommand+0x84>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	98 ab       	std	Y+48, r25	; 0x30
    2474:	8f a7       	std	Y+47, r24	; 0x2f
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6d a9       	ldd	r22, Y+53	; 0x35
    2492:	7e a9       	ldd	r23, Y+54	; 0x36
    2494:	8f a9       	ldd	r24, Y+55	; 0x37
    2496:	98 ad       	ldd	r25, Y+56	; 0x38
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	98 ab       	std	Y+48, r25	; 0x30
    24b6:	8f a7       	std	Y+47, r24	; 0x2f
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <LCD_sendCommand+0xe4>
    24ba:	89 e1       	ldi	r24, 0x19	; 25
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e a7       	std	Y+46, r25	; 0x2e
    24c0:	8d a7       	std	Y+45, r24	; 0x2d
    24c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_sendCommand+0xd2>
    24ca:	9e a7       	std	Y+46, r25	; 0x2e
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d0:	98 a9       	ldd	r25, Y+48	; 0x30
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	98 ab       	std	Y+48, r25	; 0x30
    24d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24da:	98 a9       	ldd	r25, Y+48	; 0x30
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <LCD_sendCommand+0xc6>
    24e0:	14 c0       	rjmp	.+40     	; 0x250a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	69 a9       	ldd	r22, Y+49	; 0x31
    24e4:	7a a9       	ldd	r23, Y+50	; 0x32
    24e6:	8b a9       	ldd	r24, Y+51	; 0x33
    24e8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	9c a7       	std	Y+44, r25	; 0x2c
    24fc:	8b a7       	std	Y+43, r24	; 0x2b
    24fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2500:	9c a5       	ldd	r25, Y+44	; 0x2c
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x10e>
    2506:	9c a7       	std	Y+44, r25	; 0x2c
    2508:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    250a:	a2 e3       	ldi	r26, 0x32	; 50
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e2 e3       	ldi	r30, 0x32	; 50
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 61       	ori	r24, 0x10	; 16
    2516:	8c 93       	st	X, r24
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e8       	ldi	r26, 0x80	; 128
    251e:	bf e3       	ldi	r27, 0x3F	; 63
    2520:	8f a3       	std	Y+39, r24	; 0x27
    2522:	98 a7       	std	Y+40, r25	; 0x28
    2524:	a9 a7       	std	Y+41, r26	; 0x29
    2526:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6f a1       	ldd	r22, Y+39	; 0x27
    252a:	78 a5       	ldd	r23, Y+40	; 0x28
    252c:	89 a5       	ldd	r24, Y+41	; 0x29
    252e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a e7       	ldi	r20, 0x7A	; 122
    2536:	53 e4       	ldi	r21, 0x43	; 67
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8b a3       	std	Y+35, r24	; 0x23
    2542:	9c a3       	std	Y+36, r25	; 0x24
    2544:	ad a3       	std	Y+37, r26	; 0x25
    2546:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <LCD_sendCommand+0x176>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9a a3       	std	Y+34, r25	; 0x22
    2566:	89 a3       	std	Y+33, r24	; 0x21
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    256a:	6b a1       	ldd	r22, Y+35	; 0x23
    256c:	7c a1       	ldd	r23, Y+36	; 0x24
    256e:	8d a1       	ldd	r24, Y+37	; 0x25
    2570:	9e a1       	ldd	r25, Y+38	; 0x26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6f a1       	ldd	r22, Y+39	; 0x27
    2584:	78 a5       	ldd	r23, Y+40	; 0x28
    2586:	89 a5       	ldd	r24, Y+41	; 0x29
    2588:	9a a5       	ldd	r25, Y+42	; 0x2a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <LCD_sendCommand+0x1d6>
    25ac:	89 e1       	ldi	r24, 0x19	; 25
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	98 a3       	std	Y+32, r25	; 0x20
    25b2:	8f 8f       	std	Y+31, r24	; 0x1f
    25b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b6:	98 a1       	ldd	r25, Y+32	; 0x20
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_sendCommand+0x1c4>
    25bc:	98 a3       	std	Y+32, r25	; 0x20
    25be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	89 a1       	ldd	r24, Y+33	; 0x21
    25c2:	9a a1       	ldd	r25, Y+34	; 0x22
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9a a3       	std	Y+34, r25	; 0x22
    25c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	89 a1       	ldd	r24, Y+33	; 0x21
    25cc:	9a a1       	ldd	r25, Y+34	; 0x22
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <LCD_sendCommand+0x1b8>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6b a1       	ldd	r22, Y+35	; 0x23
    25d6:	7c a1       	ldd	r23, Y+36	; 0x24
    25d8:	8d a1       	ldd	r24, Y+37	; 0x25
    25da:	9e a1       	ldd	r25, Y+38	; 0x26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9a a3       	std	Y+34, r25	; 0x22
    25e6:	89 a3       	std	Y+33, r24	; 0x21
    25e8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ea:	9a a1       	ldd	r25, Y+34	; 0x22
    25ec:	9e 8f       	std	Y+30, r25	; 0x1e
    25ee:	8d 8f       	std	Y+29, r24	; 0x1d
    25f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_sendCommand+0x200>
    25f8:	9e 8f       	std	Y+30, r25	; 0x1e
    25fa:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    25fc:	e5 e3       	ldi	r30, 0x35	; 53
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	89 ad       	ldd	r24, Y+57	; 0x39
    2602:	80 83       	st	Z, r24
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	89 8f       	std	Y+25, r24	; 0x19
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ab 8f       	std	Y+27, r26	; 0x1b
    2612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8d 8b       	std	Y+21, r24	; 0x15
    262e:	9e 8b       	std	Y+22, r25	; 0x16
    2630:	af 8b       	std	Y+23, r26	; 0x17
    2632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_sendCommand+0x262>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_sendCommand+0x2c2>
    2698:	89 e1       	ldi	r24, 0x19	; 25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	9a 89       	ldd	r25, Y+18	; 0x12
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_sendCommand+0x2b0>
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_sendCommand+0x2a4>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_sendCommand+0x2ec>
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    26e8:	a2 e3       	ldi	r26, 0x32	; 50
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e2 e3       	ldi	r30, 0x32	; 50
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 7e       	andi	r24, 0xEF	; 239
    26f4:	8c 93       	st	X, r24
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e8       	ldi	r26, 0x80	; 128
    26fc:	bf e3       	ldi	r27, 0x3F	; 63
    26fe:	8b 87       	std	Y+11, r24	; 0x0b
    2700:	9c 87       	std	Y+12, r25	; 0x0c
    2702:	ad 87       	std	Y+13, r26	; 0x0d
    2704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6b 85       	ldd	r22, Y+11	; 0x0b
    2708:	7c 85       	ldd	r23, Y+12	; 0x0c
    270a:	8d 85       	ldd	r24, Y+13	; 0x0d
    270c:	9e 85       	ldd	r25, Y+14	; 0x0e
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	53 e4       	ldi	r21, 0x43	; 67
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	98 87       	std	Y+8, r25	; 0x08
    2722:	a9 87       	std	Y+9, r26	; 0x09
    2724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <LCD_sendCommand+0x354>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	8d 83       	std	Y+5, r24	; 0x05
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <LCD_sendCommand+0x3b4>
    278a:	89 e1       	ldi	r24, 0x19	; 25
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_sendCommand+0x3a2>
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <LCD_sendCommand+0x396>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_sendCommand+0x3de>
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27da:	e9 96       	adiw	r28, 0x39	; 57
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	e9 97       	sbiw	r28, 0x39	; 57
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2802:	a2 e3       	ldi	r26, 0x32	; 50
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e2 e3       	ldi	r30, 0x32	; 50
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	84 60       	ori	r24, 0x04	; 4
    280e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2810:	a2 e3       	ldi	r26, 0x32	; 50
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e2 e3       	ldi	r30, 0x32	; 50
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	87 7f       	andi	r24, 0xF7	; 247
    281c:	8c 93       	st	X, r24
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e8       	ldi	r26, 0x80	; 128
    2824:	bf e3       	ldi	r27, 0x3F	; 63
    2826:	8d ab       	std	Y+53, r24	; 0x35
    2828:	9e ab       	std	Y+54, r25	; 0x36
    282a:	af ab       	std	Y+55, r26	; 0x37
    282c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	6d a9       	ldd	r22, Y+53	; 0x35
    2830:	7e a9       	ldd	r23, Y+54	; 0x36
    2832:	8f a9       	ldd	r24, Y+55	; 0x37
    2834:	98 ad       	ldd	r25, Y+56	; 0x38
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	53 e4       	ldi	r21, 0x43	; 67
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	89 ab       	std	Y+49, r24	; 0x31
    2848:	9a ab       	std	Y+50, r25	; 0x32
    284a:	ab ab       	std	Y+51, r26	; 0x33
    284c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    284e:	69 a9       	ldd	r22, Y+49	; 0x31
    2850:	7a a9       	ldd	r23, Y+50	; 0x32
    2852:	8b a9       	ldd	r24, Y+51	; 0x33
    2854:	9c a9       	ldd	r25, Y+52	; 0x34
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	98 ab       	std	Y+48, r25	; 0x30
    286c:	8f a7       	std	Y+47, r24	; 0x2f
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2870:	69 a9       	ldd	r22, Y+49	; 0x31
    2872:	7a a9       	ldd	r23, Y+50	; 0x32
    2874:	8b a9       	ldd	r24, Y+51	; 0x33
    2876:	9c a9       	ldd	r25, Y+52	; 0x34
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	6d a9       	ldd	r22, Y+53	; 0x35
    288a:	7e a9       	ldd	r23, Y+54	; 0x36
    288c:	8f a9       	ldd	r24, Y+55	; 0x37
    288e:	98 ad       	ldd	r25, Y+56	; 0x38
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <LCD_displayCharacter+0xe4>
    28b2:	89 e1       	ldi	r24, 0x19	; 25
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9e a7       	std	Y+46, r25	; 0x2e
    28b8:	8d a7       	std	Y+45, r24	; 0x2d
    28ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    28bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_displayCharacter+0xd2>
    28c2:	9e a7       	std	Y+46, r25	; 0x2e
    28c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	98 ab       	std	Y+48, r25	; 0x30
    28ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	98 a9       	ldd	r25, Y+48	; 0x30
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <LCD_displayCharacter+0xc6>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	69 a9       	ldd	r22, Y+49	; 0x31
    28dc:	7a a9       	ldd	r23, Y+50	; 0x32
    28de:	8b a9       	ldd	r24, Y+51	; 0x33
    28e0:	9c a9       	ldd	r25, Y+52	; 0x34
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f0:	98 a9       	ldd	r25, Y+48	; 0x30
    28f2:	9c a7       	std	Y+44, r25	; 0x2c
    28f4:	8b a7       	std	Y+43, r24	; 0x2b
    28f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_displayCharacter+0x10e>
    28fe:	9c a7       	std	Y+44, r25	; 0x2c
    2900:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2902:	a2 e3       	ldi	r26, 0x32	; 50
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e2 e3       	ldi	r30, 0x32	; 50
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	80 61       	ori	r24, 0x10	; 16
    290e:	8c 93       	st	X, r24
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e8       	ldi	r26, 0x80	; 128
    2916:	bf e3       	ldi	r27, 0x3F	; 63
    2918:	8f a3       	std	Y+39, r24	; 0x27
    291a:	98 a7       	std	Y+40, r25	; 0x28
    291c:	a9 a7       	std	Y+41, r26	; 0x29
    291e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	6f a1       	ldd	r22, Y+39	; 0x27
    2922:	78 a5       	ldd	r23, Y+40	; 0x28
    2924:	89 a5       	ldd	r24, Y+41	; 0x29
    2926:	9a a5       	ldd	r25, Y+42	; 0x2a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a e7       	ldi	r20, 0x7A	; 122
    292e:	53 e4       	ldi	r21, 0x43	; 67
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8b a3       	std	Y+35, r24	; 0x23
    293a:	9c a3       	std	Y+36, r25	; 0x24
    293c:	ad a3       	std	Y+37, r26	; 0x25
    293e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2940:	6b a1       	ldd	r22, Y+35	; 0x23
    2942:	7c a1       	ldd	r23, Y+36	; 0x24
    2944:	8d a1       	ldd	r24, Y+37	; 0x25
    2946:	9e a1       	ldd	r25, Y+38	; 0x26
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	2c f4       	brge	.+10     	; 0x2962 <LCD_displayCharacter+0x176>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9a a3       	std	Y+34, r25	; 0x22
    295e:	89 a3       	std	Y+33, r24	; 0x21
    2960:	3f c0       	rjmp	.+126    	; 0x29e0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2962:	6b a1       	ldd	r22, Y+35	; 0x23
    2964:	7c a1       	ldd	r23, Y+36	; 0x24
    2966:	8d a1       	ldd	r24, Y+37	; 0x25
    2968:	9e a1       	ldd	r25, Y+38	; 0x26
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	3f ef       	ldi	r19, 0xFF	; 255
    296e:	4f e7       	ldi	r20, 0x7F	; 127
    2970:	57 e4       	ldi	r21, 0x47	; 71
    2972:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2976:	18 16       	cp	r1, r24
    2978:	4c f5       	brge	.+82     	; 0x29cc <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	6f a1       	ldd	r22, Y+39	; 0x27
    297c:	78 a5       	ldd	r23, Y+40	; 0x28
    297e:	89 a5       	ldd	r24, Y+41	; 0x29
    2980:	9a a5       	ldd	r25, Y+42	; 0x2a
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9a a3       	std	Y+34, r25	; 0x22
    29a0:	89 a3       	std	Y+33, r24	; 0x21
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <LCD_displayCharacter+0x1d6>
    29a4:	89 e1       	ldi	r24, 0x19	; 25
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	98 a3       	std	Y+32, r25	; 0x20
    29aa:	8f 8f       	std	Y+31, r24	; 0x1f
    29ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29ae:	98 a1       	ldd	r25, Y+32	; 0x20
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_displayCharacter+0x1c4>
    29b4:	98 a3       	std	Y+32, r25	; 0x20
    29b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ba:	9a a1       	ldd	r25, Y+34	; 0x22
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	9a a3       	std	Y+34, r25	; 0x22
    29c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	89 a1       	ldd	r24, Y+33	; 0x21
    29c4:	9a a1       	ldd	r25, Y+34	; 0x22
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	69 f7       	brne	.-38     	; 0x29a4 <LCD_displayCharacter+0x1b8>
    29ca:	14 c0       	rjmp	.+40     	; 0x29f4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29cc:	6b a1       	ldd	r22, Y+35	; 0x23
    29ce:	7c a1       	ldd	r23, Y+36	; 0x24
    29d0:	8d a1       	ldd	r24, Y+37	; 0x25
    29d2:	9e a1       	ldd	r25, Y+38	; 0x26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	9e 8f       	std	Y+30, r25	; 0x1e
    29e6:	8d 8f       	std	Y+29, r24	; 0x1d
    29e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_displayCharacter+0x200>
    29f0:	9e 8f       	std	Y+30, r25	; 0x1e
    29f2:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    29f4:	e5 e3       	ldi	r30, 0x35	; 53
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	89 ad       	ldd	r24, Y+57	; 0x39
    29fa:	80 83       	st	Z, r24
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e8       	ldi	r26, 0x80	; 128
    2a02:	bf e3       	ldi	r27, 0x3F	; 63
    2a04:	89 8f       	std	Y+25, r24	; 0x19
    2a06:	9a 8f       	std	Y+26, r25	; 0x1a
    2a08:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4a e7       	ldi	r20, 0x7A	; 122
    2a1a:	53 e4       	ldi	r21, 0x43	; 67
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	8d 8b       	std	Y+21, r24	; 0x15
    2a26:	9e 8b       	std	Y+22, r25	; 0x16
    2a28:	af 8b       	std	Y+23, r26	; 0x17
    2a2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a30:	8f 89       	ldd	r24, Y+23	; 0x17
    2a32:	98 8d       	ldd	r25, Y+24	; 0x18
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	2c f4       	brge	.+10     	; 0x2a4e <LCD_displayCharacter+0x262>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9c 8b       	std	Y+20, r25	; 0x14
    2a4a:	8b 8b       	std	Y+19, r24	; 0x13
    2a4c:	3f c0       	rjmp	.+126    	; 0x2acc <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a50:	7e 89       	ldd	r23, Y+22	; 0x16
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	4c f5       	brge	.+82     	; 0x2ab8 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	69 8d       	ldd	r22, Y+25	; 0x19
    2a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e2       	ldi	r20, 0x20	; 32
    2a74:	51 e4       	ldi	r21, 0x41	; 65
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <LCD_displayCharacter+0x2c2>
    2a90:	89 e1       	ldi	r24, 0x19	; 25
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9a 8b       	std	Y+18, r25	; 0x12
    2a96:	89 8b       	std	Y+17, r24	; 0x11
    2a98:	89 89       	ldd	r24, Y+17	; 0x11
    2a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_displayCharacter+0x2b0>
    2aa0:	9a 8b       	std	Y+18, r25	; 0x12
    2aa2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <LCD_displayCharacter+0x2a4>
    2ab6:	14 c0       	rjmp	.+40     	; 0x2ae0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aba:	7e 89       	ldd	r23, Y+22	; 0x16
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	98 8b       	std	Y+16, r25	; 0x10
    2ad2:	8f 87       	std	Y+15, r24	; 0x0f
    2ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad6:	98 89       	ldd	r25, Y+16	; 0x10
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_displayCharacter+0x2ec>
    2adc:	98 8b       	std	Y+16, r25	; 0x10
    2ade:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2ae0:	a2 e3       	ldi	r26, 0x32	; 50
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e2 e3       	ldi	r30, 0x32	; 50
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	8f 7e       	andi	r24, 0xEF	; 239
    2aec:	8c 93       	st	X, r24
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	a0 e8       	ldi	r26, 0x80	; 128
    2af4:	bf e3       	ldi	r27, 0x3F	; 63
    2af6:	8b 87       	std	Y+11, r24	; 0x0b
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	ad 87       	std	Y+13, r26	; 0x0d
    2afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a e7       	ldi	r20, 0x7A	; 122
    2b0c:	53 e4       	ldi	r21, 0x43	; 67
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8f 83       	std	Y+7, r24	; 0x07
    2b18:	98 87       	std	Y+8, r25	; 0x08
    2b1a:	a9 87       	std	Y+9, r26	; 0x09
    2b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <LCD_displayCharacter+0x3b4>
    2b82:	89 e1       	ldi	r24, 0x19	; 25
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_displayCharacter+0x3a2>
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <LCD_displayCharacter+0x396>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_displayCharacter+0x3de>
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bd2:	e9 96       	adiw	r28, 0x39	; 57
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <LCD_displayString+0x6>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bf4:	19 82       	std	Y+1, r1	; 0x01
    2bf6:	0e c0       	rjmp	.+28     	; 0x2c14 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	80 81       	ld	r24, Z
    2c0a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_displayCharacter>
		i++;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	88 23       	and	r24, r24
    2c28:	39 f7       	brne	.-50     	; 0x2bf8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <LCD_goToRowColumn+0x6>
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <LCD_goToRowColumn+0x8>
    2c3e:	0f 92       	push	r0
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	8a 83       	std	Y+2, r24	; 0x02
    2c46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	3d 83       	std	Y+5, r19	; 0x05
    2c50:	2c 83       	std	Y+4, r18	; 0x04
    2c52:	8c 81       	ldd	r24, Y+4	; 0x04
    2c54:	9d 81       	ldd	r25, Y+5	; 0x05
    2c56:	81 30       	cpi	r24, 0x01	; 1
    2c58:	91 05       	cpc	r25, r1
    2c5a:	c1 f0       	breq	.+48     	; 0x2c8c <LCD_goToRowColumn+0x56>
    2c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c60:	22 30       	cpi	r18, 0x02	; 2
    2c62:	31 05       	cpc	r19, r1
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <LCD_goToRowColumn+0x3a>
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
    2c68:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	61 f0       	breq	.+24     	; 0x2c86 <LCD_goToRowColumn+0x50>
    2c6e:	19 c0       	rjmp	.+50     	; 0x2ca2 <LCD_goToRowColumn+0x6c>
    2c70:	2c 81       	ldd	r18, Y+4	; 0x04
    2c72:	3d 81       	ldd	r19, Y+5	; 0x05
    2c74:	22 30       	cpi	r18, 0x02	; 2
    2c76:	31 05       	cpc	r19, r1
    2c78:	69 f0       	breq	.+26     	; 0x2c94 <LCD_goToRowColumn+0x5e>
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7e:	83 30       	cpi	r24, 0x03	; 3
    2c80:	91 05       	cpc	r25, r1
    2c82:	61 f0       	breq	.+24     	; 0x2c9c <LCD_goToRowColumn+0x66>
    2c84:	0e c0       	rjmp	.+28     	; 0x2ca2 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	0b c0       	rjmp	.+22     	; 0x2ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	80 5c       	subi	r24, 0xC0	; 192
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	07 c0       	rjmp	.+14     	; 0x2ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	80 5f       	subi	r24, 0xF0	; 240
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	80 5b       	subi	r24, 0xB0	; 176
    2ca0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	80 68       	ori	r24, 0x80	; 128
    2ca6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_sendCommand>
}
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <LCD_displayStringRowColumn+0x6>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <LCD_displayStringRowColumn+0x8>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	6a 83       	std	Y+2, r22	; 0x02
    2cca:	5c 83       	std	Y+4, r21	; 0x04
    2ccc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_displayString>
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	62 97       	sbiw	r28, 0x12	; 18
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	9a 8b       	std	Y+18, r25	; 0x12
    2d02:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2d04:	89 89       	ldd	r24, Y+17	; 0x11
    2d06:	9a 89       	ldd	r25, Y+18	; 0x12
    2d08:	9e 01       	movw	r18, r28
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0e:	b9 01       	movw	r22, r18
    2d10:	4a e0       	ldi	r20, 0x0A	; 10
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	0e 94 c3 18 	call	0x3186	; 0x3186 <itoa>
   LCD_displayString(buff);
    2d18:	ce 01       	movw	r24, r28
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_displayString>
}
    2d20:	62 96       	adiw	r28, 0x12	; 18
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_sendCommand>
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <__vector_9>:
#include "timer0.h"

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    2d46:	1f 92       	push	r1
    2d48:	0f 92       	push	r0
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	0f 92       	push	r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	2f 93       	push	r18
    2d52:	3f 93       	push	r19
    2d54:	4f 93       	push	r20
    2d56:	5f 93       	push	r21
    2d58:	6f 93       	push	r22
    2d5a:	7f 93       	push	r23
    2d5c:	8f 93       	push	r24
    2d5e:	9f 93       	push	r25
    2d60:	af 93       	push	r26
    2d62:	bf 93       	push	r27
    2d64:	ef 93       	push	r30
    2d66:	ff 93       	push	r31
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2d70:	80 91 33 01 	lds	r24, 0x0133
    2d74:	90 91 34 01 	lds	r25, 0x0134
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	29 f0       	breq	.+10     	; 0x2d86 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d7c:	e0 91 33 01 	lds	r30, 0x0133
    2d80:	f0 91 34 01 	lds	r31, 0x0134
    2d84:	09 95       	icall
	}
}
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	ff 91       	pop	r31
    2d8c:	ef 91       	pop	r30
    2d8e:	bf 91       	pop	r27
    2d90:	af 91       	pop	r26
    2d92:	9f 91       	pop	r25
    2d94:	8f 91       	pop	r24
    2d96:	7f 91       	pop	r23
    2d98:	6f 91       	pop	r22
    2d9a:	5f 91       	pop	r21
    2d9c:	4f 91       	pop	r20
    2d9e:	3f 91       	pop	r19
    2da0:	2f 91       	pop	r18
    2da2:	0f 90       	pop	r0
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	0f 90       	pop	r0
    2da8:	1f 90       	pop	r1
    2daa:	18 95       	reti

00002dac <timer0_init_normal_mode>:

void timer0_init_normal_mode(const Timer0_ConfigType * Timer0_ConfigPtr)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	00 d0       	rcall	.+0      	; 0x2db2 <timer0_init_normal_mode+0x6>
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Timer0_ConfigPtr->initialValue; //Set Timer initial value to 0
    2dba:	a2 e5       	ldi	r26, 0x52	; 82
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8c 93       	st	X, r24
	OCR0 = Timer0_ConfigPtr->compareValue;
    2dc6:	ac e5       	ldi	r26, 0x5C	; 92
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 81       	ldd	r30, Y+1	; 0x01
    2dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dce:	81 81       	ldd	r24, Z+1	; 0x01
    2dd0:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2dd2:	a9 e5       	ldi	r26, 0x59	; 89
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	e9 e5       	ldi	r30, 0x59	; 89
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	81 60       	ori	r24, 0x01	; 1
    2dde:	8c 93       	st	X, r24
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	//TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
	TCCR0 = (TCCR0 & 0b00000111) | ((Timer0_ConfigPtr->mode)<<3);
    2de0:	a3 e5       	ldi	r26, 0x53	; 83
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e3 e5       	ldi	r30, 0x53	; 83
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	28 2f       	mov	r18, r24
    2dec:	27 70       	andi	r18, 0x07	; 7
    2dee:	e9 81       	ldd	r30, Y+1	; 0x01
    2df0:	fa 81       	ldd	r31, Y+2	; 0x02
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	82 2b       	or	r24, r18
    2e06:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0b11111000) | (Timer0_ConfigPtr->prescale);
    2e08:	a3 e5       	ldi	r26, 0x53	; 83
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	e3 e5       	ldi	r30, 0x53	; 83
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	98 2f       	mov	r25, r24
    2e14:	98 7f       	andi	r25, 0xF8	; 248
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	83 81       	ldd	r24, Z+3	; 0x03
    2e1c:	89 2b       	or	r24, r25
    2e1e:	8c 93       	st	X, r24
	SREG  |= (1<<7);
    2e20:	af e5       	ldi	r26, 0x5F	; 95
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	ef e5       	ldi	r30, 0x5F	; 95
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	80 68       	ori	r24, 0x80	; 128
    2e2c:	8c 93       	st	X, r24
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <timer0_setCallBack>:

void timer0_setCallBack(void(*a_ptr)(void))
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <timer0_setCallBack+0x6>
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	90 93 34 01 	sts	0x0134, r25
    2e4e:	80 93 33 01 	sts	0x0133, r24
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType * UART_ConfigPtr)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <UART_init+0x6>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e6a:	eb e2       	ldi	r30, 0x2B	; 43
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e72:	ea e2       	ldi	r30, 0x2A	; 42
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	88 e1       	ldi	r24, 0x18	; 24
    2e78:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0b11111011) | ((UART_ConfigPtr->UCSZ_2)<<2); //Bits data
    2e7a:	aa e2       	ldi	r26, 0x2A	; 42
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ea e2       	ldi	r30, 0x2A	; 42
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	28 2f       	mov	r18, r24
    2e86:	2b 7f       	andi	r18, 0xFB	; 251
    2e88:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8c:	85 81       	ldd	r24, Z+5	; 0x05
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	82 2b       	or	r24, r18
    2e9c:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
	UCSRC = (1<<URSEL);
    2e9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 e8       	ldi	r24, 0x80	; 128
    2ea4:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0b11001111) | ((UART_ConfigPtr->parityMode)<<4); //parity
    2ea6:	a0 e4       	ldi	r26, 0x40	; 64
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e0 e4       	ldi	r30, 0x40	; 64
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	2f 7c       	andi	r18, 0xCF	; 207
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	82 95       	swap	r24
    2ec0:	92 95       	swap	r25
    2ec2:	90 7f       	andi	r25, 0xF0	; 240
    2ec4:	98 27       	eor	r25, r24
    2ec6:	80 7f       	andi	r24, 0xF0	; 240
    2ec8:	98 27       	eor	r25, r24
    2eca:	82 2b       	or	r24, r18
    2ecc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0b11110111) | ((UART_ConfigPtr->stopBits)<<3); //stopBits
    2ece:	a0 e4       	ldi	r26, 0x40	; 64
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e0 e4       	ldi	r30, 0x40	; 64
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	28 2f       	mov	r18, r24
    2eda:	27 7f       	andi	r18, 0xF7	; 247
    2edc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ede:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee0:	83 81       	ldd	r24, Z+3	; 0x03
    2ee2:	88 2f       	mov	r24, r24
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	88 0f       	add	r24, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	82 2b       	or	r24, r18
    2ef4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0b11111001) | ((UART_ConfigPtr->UCSZ_1_0)<<1); //Bits data
    2ef6:	a0 e4       	ldi	r26, 0x40	; 64
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e0 e4       	ldi	r30, 0x40	; 64
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	28 2f       	mov	r18, r24
    2f02:	29 7f       	andi	r18, 0xF9	; 249
    2f04:	e9 81       	ldd	r30, Y+1	; 0x01
    2f06:	fa 81       	ldd	r31, Y+2	; 0x02
    2f08:	84 81       	ldd	r24, Z+4	; 0x04
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	82 2b       	or	r24, r18
    2f14:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	BAUD_PRESCALE = (((8000000 / ((UART_ConfigPtr->baudRate) * 8UL))) - 1);
    2f16:	e9 81       	ldd	r30, Y+1	; 0x01
    2f18:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	cc 01       	movw	r24, r24
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	aa 1f       	adc	r26, r26
    2f32:	bb 1f       	adc	r27, r27
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	ad 01       	movw	r20, r26
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	92 e1       	ldi	r25, 0x12	; 18
    2f44:	aa e7       	ldi	r26, 0x7A	; 122
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__udivmodsi4>
    2f50:	da 01       	movw	r26, r20
    2f52:	c9 01       	movw	r24, r18
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	90 93 3e 01 	sts	0x013E, r25
    2f5a:	80 93 3d 01 	sts	0x013D, r24
	UBRRH = BAUD_PRESCALE>>8;
    2f5e:	e0 e4       	ldi	r30, 0x40	; 64
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 91 3d 01 	lds	r24, 0x013D
    2f66:	90 91 3e 01 	lds	r25, 0x013E
    2f6a:	89 2f       	mov	r24, r25
    2f6c:	99 27       	eor	r25, r25
    2f6e:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    2f70:	e9 e2       	ldi	r30, 0x29	; 41
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 91 3d 01 	lds	r24, 0x013D
    2f78:	90 91 3e 01 	lds	r25, 0x013E
    2f7c:	80 83       	st	Z, r24
}
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f94:	eb e2       	ldi	r30, 0x2B	; 43
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	80 72       	andi	r24, 0x20	; 32
    2fa0:	90 70       	andi	r25, 0x00	; 0
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	b9 f3       	breq	.-18     	; 0x2f94 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2fa6:	ec e2       	ldi	r30, 0x2C	; 44
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2fae:	0f 90       	pop	r0
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2fbe:	eb e2       	ldi	r30, 0x2B	; 43
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	88 23       	and	r24, r24
    2fc6:	dc f7       	brge	.-10     	; 0x2fbe <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2fc8:	ec e2       	ldi	r30, 0x2C	; 44
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
}
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <UART_sendString+0x6>
    2fda:	0f 92       	push	r0
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	9b 83       	std	Y+3, r25	; 0x03
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fe4:	19 82       	std	Y+1, r1	; 0x01
    2fe6:	0e c0       	rjmp	.+28     	; 0x3004 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	80 81       	ld	r24, Z
    2ffa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <UART_sendByte>
		i++;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	8f 5f       	subi	r24, 0xFF	; 255
    3002:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	fc 01       	movw	r30, r24
    3010:	e2 0f       	add	r30, r18
    3012:	f3 1f       	adc	r31, r19
    3014:	80 81       	ld	r24, Z
    3016:	88 23       	and	r24, r24
    3018:	39 f7       	brne	.-50     	; 0x2fe8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	00 d0       	rcall	.+0      	; 0x3030 <UART_receiveString+0xa>
    3030:	0f 92       	push	r0
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	9b 83       	std	Y+3, r25	; 0x03
    3038:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    303a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	9b 81       	ldd	r25, Y+3	; 0x03
    3046:	8c 01       	movw	r16, r24
    3048:	02 0f       	add	r16, r18
    304a:	13 1f       	adc	r17, r19
    304c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    3050:	f8 01       	movw	r30, r16
    3052:	80 83       	st	Z, r24
    3054:	0f c0       	rjmp	.+30     	; 0x3074 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	9b 81       	ldd	r25, Y+3	; 0x03
    3066:	8c 01       	movw	r16, r24
    3068:	02 0f       	add	r16, r18
    306a:	13 1f       	adc	r17, r19
    306c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <UART_recieveByte>
    3070:	f8 01       	movw	r30, r16
    3072:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	fc 01       	movw	r30, r24
    3080:	e2 0f       	add	r30, r18
    3082:	f3 1f       	adc	r31, r19
    3084:	80 81       	ld	r24, Z
    3086:	83 32       	cpi	r24, 0x23	; 35
    3088:	31 f7       	brne	.-52     	; 0x3056 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    308a:	89 81       	ldd	r24, Y+1	; 0x01
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	fc 01       	movw	r30, r24
    3096:	e2 0f       	add	r30, r18
    3098:	f3 1f       	adc	r31, r19
    309a:	10 82       	st	Z, r1
}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <__udivmodhi4>:
    30ac:	aa 1b       	sub	r26, r26
    30ae:	bb 1b       	sub	r27, r27
    30b0:	51 e1       	ldi	r21, 0x11	; 17
    30b2:	07 c0       	rjmp	.+14     	; 0x30c2 <__udivmodhi4_ep>

000030b4 <__udivmodhi4_loop>:
    30b4:	aa 1f       	adc	r26, r26
    30b6:	bb 1f       	adc	r27, r27
    30b8:	a6 17       	cp	r26, r22
    30ba:	b7 07       	cpc	r27, r23
    30bc:	10 f0       	brcs	.+4      	; 0x30c2 <__udivmodhi4_ep>
    30be:	a6 1b       	sub	r26, r22
    30c0:	b7 0b       	sbc	r27, r23

000030c2 <__udivmodhi4_ep>:
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	5a 95       	dec	r21
    30c8:	a9 f7       	brne	.-22     	; 0x30b4 <__udivmodhi4_loop>
    30ca:	80 95       	com	r24
    30cc:	90 95       	com	r25
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	08 95       	ret

000030d4 <__udivmodsi4>:
    30d4:	a1 e2       	ldi	r26, 0x21	; 33
    30d6:	1a 2e       	mov	r1, r26
    30d8:	aa 1b       	sub	r26, r26
    30da:	bb 1b       	sub	r27, r27
    30dc:	fd 01       	movw	r30, r26
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <__udivmodsi4_ep>

000030e0 <__udivmodsi4_loop>:
    30e0:	aa 1f       	adc	r26, r26
    30e2:	bb 1f       	adc	r27, r27
    30e4:	ee 1f       	adc	r30, r30
    30e6:	ff 1f       	adc	r31, r31
    30e8:	a2 17       	cp	r26, r18
    30ea:	b3 07       	cpc	r27, r19
    30ec:	e4 07       	cpc	r30, r20
    30ee:	f5 07       	cpc	r31, r21
    30f0:	20 f0       	brcs	.+8      	; 0x30fa <__udivmodsi4_ep>
    30f2:	a2 1b       	sub	r26, r18
    30f4:	b3 0b       	sbc	r27, r19
    30f6:	e4 0b       	sbc	r30, r20
    30f8:	f5 0b       	sbc	r31, r21

000030fa <__udivmodsi4_ep>:
    30fa:	66 1f       	adc	r22, r22
    30fc:	77 1f       	adc	r23, r23
    30fe:	88 1f       	adc	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	1a 94       	dec	r1
    3104:	69 f7       	brne	.-38     	; 0x30e0 <__udivmodsi4_loop>
    3106:	60 95       	com	r22
    3108:	70 95       	com	r23
    310a:	80 95       	com	r24
    310c:	90 95       	com	r25
    310e:	9b 01       	movw	r18, r22
    3110:	ac 01       	movw	r20, r24
    3112:	bd 01       	movw	r22, r26
    3114:	cf 01       	movw	r24, r30
    3116:	08 95       	ret

00003118 <__prologue_saves__>:
    3118:	2f 92       	push	r2
    311a:	3f 92       	push	r3
    311c:	4f 92       	push	r4
    311e:	5f 92       	push	r5
    3120:	6f 92       	push	r6
    3122:	7f 92       	push	r7
    3124:	8f 92       	push	r8
    3126:	9f 92       	push	r9
    3128:	af 92       	push	r10
    312a:	bf 92       	push	r11
    312c:	cf 92       	push	r12
    312e:	df 92       	push	r13
    3130:	ef 92       	push	r14
    3132:	ff 92       	push	r15
    3134:	0f 93       	push	r16
    3136:	1f 93       	push	r17
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	ca 1b       	sub	r28, r26
    3142:	db 0b       	sbc	r29, r27
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	09 94       	ijmp

00003150 <__epilogue_restores__>:
    3150:	2a 88       	ldd	r2, Y+18	; 0x12
    3152:	39 88       	ldd	r3, Y+17	; 0x11
    3154:	48 88       	ldd	r4, Y+16	; 0x10
    3156:	5f 84       	ldd	r5, Y+15	; 0x0f
    3158:	6e 84       	ldd	r6, Y+14	; 0x0e
    315a:	7d 84       	ldd	r7, Y+13	; 0x0d
    315c:	8c 84       	ldd	r8, Y+12	; 0x0c
    315e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3160:	aa 84       	ldd	r10, Y+10	; 0x0a
    3162:	b9 84       	ldd	r11, Y+9	; 0x09
    3164:	c8 84       	ldd	r12, Y+8	; 0x08
    3166:	df 80       	ldd	r13, Y+7	; 0x07
    3168:	ee 80       	ldd	r14, Y+6	; 0x06
    316a:	fd 80       	ldd	r15, Y+5	; 0x05
    316c:	0c 81       	ldd	r16, Y+4	; 0x04
    316e:	1b 81       	ldd	r17, Y+3	; 0x03
    3170:	aa 81       	ldd	r26, Y+2	; 0x02
    3172:	b9 81       	ldd	r27, Y+1	; 0x01
    3174:	ce 0f       	add	r28, r30
    3176:	d1 1d       	adc	r29, r1
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	ed 01       	movw	r28, r26
    3184:	08 95       	ret

00003186 <itoa>:
    3186:	fb 01       	movw	r30, r22
    3188:	9f 01       	movw	r18, r30
    318a:	e8 94       	clt
    318c:	42 30       	cpi	r20, 0x02	; 2
    318e:	c4 f0       	brlt	.+48     	; 0x31c0 <itoa+0x3a>
    3190:	45 32       	cpi	r20, 0x25	; 37
    3192:	b4 f4       	brge	.+44     	; 0x31c0 <itoa+0x3a>
    3194:	4a 30       	cpi	r20, 0x0A	; 10
    3196:	29 f4       	brne	.+10     	; 0x31a2 <itoa+0x1c>
    3198:	97 fb       	bst	r25, 7
    319a:	1e f4       	brtc	.+6      	; 0x31a2 <itoa+0x1c>
    319c:	90 95       	com	r25
    319e:	81 95       	neg	r24
    31a0:	9f 4f       	sbci	r25, 0xFF	; 255
    31a2:	64 2f       	mov	r22, r20
    31a4:	77 27       	eor	r23, r23
    31a6:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    31aa:	80 5d       	subi	r24, 0xD0	; 208
    31ac:	8a 33       	cpi	r24, 0x3A	; 58
    31ae:	0c f0       	brlt	.+2      	; 0x31b2 <itoa+0x2c>
    31b0:	89 5d       	subi	r24, 0xD9	; 217
    31b2:	81 93       	st	Z+, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	a1 f7       	brne	.-24     	; 0x31a2 <itoa+0x1c>
    31ba:	16 f4       	brtc	.+4      	; 0x31c0 <itoa+0x3a>
    31bc:	5d e2       	ldi	r21, 0x2D	; 45
    31be:	51 93       	st	Z+, r21
    31c0:	10 82       	st	Z, r1
    31c2:	c9 01       	movw	r24, r18
    31c4:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <strrev>

000031c8 <strrev>:
    31c8:	dc 01       	movw	r26, r24
    31ca:	fc 01       	movw	r30, r24
    31cc:	67 2f       	mov	r22, r23
    31ce:	71 91       	ld	r23, Z+
    31d0:	77 23       	and	r23, r23
    31d2:	e1 f7       	brne	.-8      	; 0x31cc <strrev+0x4>
    31d4:	32 97       	sbiw	r30, 0x02	; 2
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <strrev+0x18>
    31d8:	7c 91       	ld	r23, X
    31da:	6d 93       	st	X+, r22
    31dc:	70 83       	st	Z, r23
    31de:	62 91       	ld	r22, -Z
    31e0:	ae 17       	cp	r26, r30
    31e2:	bf 07       	cpc	r27, r31
    31e4:	c8 f3       	brcs	.-14     	; 0x31d8 <strrev+0x10>
    31e6:	08 95       	ret

000031e8 <_exit>:
    31e8:	f8 94       	cli

000031ea <__stop_program>:
    31ea:	ff cf       	rjmp	.-2      	; 0x31ea <__stop_program>
